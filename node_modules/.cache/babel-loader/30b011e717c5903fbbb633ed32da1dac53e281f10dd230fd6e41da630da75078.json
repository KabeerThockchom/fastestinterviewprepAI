{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { loadStripe } from '@stripe/stripe-js';\n// const stripePromise = loadStripe('your_stripe_publishable_key');\n// function App() {\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [jobDescription, setJobDescription] = useState('');\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [resumeText, setResumeText] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const loadingTextOptions = [\n//     'Generating...',\n//     'Blackmailing the nerds...',\n//     'Interrogating the recruiters...',\n//     'Adding a touch of AI nepotism...',\n//     \"Almost there now, don't be impatient...\",\n//     \"Hey, it's at least faster than you getting a job...\",\n//   ];\n//   const [loadingTextIndex, setLoadingTextIndex] = useState(0);\n//   useEffect(() => {\n//     let interval;\n//     if (isLoading) {\n//       interval = setInterval(() => {\n//         setLoadingTextIndex((prevIndex) => (prevIndex + 1) % loadingTextOptions.length);\n//       }, 1000);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isLoading]);\n//   const handleLogin = async () => {\n//     try {\n//       const response = await fetch('/login', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n//       const data = await response.json();\n//       if (data.success) {\n//         setIsAuthenticated(true);\n//         if (email !== 'kabeerthockchom@gmail.com') {\n//           const stripe = await stripePromise;\n//           const { error } = await stripe.redirectToCheckout({\n//             lineItems: [{ price: 'price_12345', quantity: 1 }],\n//             mode: 'payment',\n//             successUrl: 'http://localhost:3000/success',\n//             cancelUrl: 'http://localhost:3000/cancel',\n//             customerEmail: email,\n//           });\n//           if (error) {\n//             console.error('Error redirecting to Stripe Checkout:', error);\n//           }\n//         }\n//       } else {\n//         alert(data.message);\n//       }\n//     } catch (error) {\n//       console.error('Error logging in:', error);\n//     }\n//   };\n//   const handleLogout = () => {\n//     setIsAuthenticated(false);\n//     setEmail('');\n//     setPassword('');\n//   };\n//   const handleFileChange = (e) => {\n//     const { name, files } = e.target;\n//     if (name === 'jobPosting') {\n//       setJobPosting(files[0]);\n//     } else {\n//       setResume(files[0]);\n//     }\n//   };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n//     const formData = new FormData();\n//     if (jobPosting) {\n//       formData.append('job_posting', jobPosting);\n//     }\n//     if (jobDescription) {\n//       formData.append('job_description', jobDescription);\n//     }\n//     formData.append('resume', resume);\n//     try {\n//       const response = await fetch('/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//       setResumeText(data.resumeText);\n//     } catch (error) {\n//       console.error('Error uploading files:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n//   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n//   const handleGenerateAnswer = async () => {\n//     if (!selectedQuestion || !resumeText) return;\n//     setIsLoading(true);\n//     try {\n//       const response = await fetch('/generate-answer', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n//       });\n//       const data = await response.json();\n//       setAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n//   return (\n//     <div className=\"App\">\n//       {!isAuthenticated ? (\n//         <div className=\"login-container\">\n//           <h2>Login</h2>\n//           <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n//           <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n//           <button onClick={handleLogin}>Login</button>\n//         </div>\n//       ) : (\n//         <>\n//           <header>\n//             <h1>InterviewPrep.AI</h1>\n//             <p>Ace your next interview with AI-powered preparation!</p>\n//             <button onClick={handleLogout}>Logout</button>\n//           </header>\n//           <main>\n//             <section className=\"upload-section\">\n//               <h2>Upload Your Documents</h2>\n//               <form onSubmit={handleSubmit} className=\"upload-form\">\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"jobDescription\">Job Description:</label>\n//                   <textarea\n//                     name=\"jobDescription\"\n//                     id=\"jobDescription\"\n//                     value={jobDescription}\n//                     onChange={(e) => setJobDescription(e.target.value)}\n//                     placeholder=\"Enter job description\"\n//                     rows={5}\n//                   ></textarea>\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <div className=\"file-upload-wrapper\">\n//                     <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//                     <label htmlFor=\"jobPosting\" className=\"file-upload-label\">\n//                       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Job Description\n//                     </label>\n//                     {jobPosting && <span className=\"file-name\">{jobPosting.name}</span>}\n//                   </div>\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <div className=\"file-upload-wrapper\">\n//                     <input type=\"file\" name=\"resume\" id=\"resume\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//                     <label htmlFor=\"resume\" className=\"file-upload-label\">\n//                       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Resume\n//                     </label>\n//                     {resume && <span className=\"file-name\">{resume.name}</span>}\n//                   </div>\n//                 </div>\n//                 <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n//                   {isLoading ? (\n//                     <>\n//                       <i className=\"fas fa-spinner fa-spin\"></i> {loadingTextOptions[loadingTextIndex]}\n//                     </>\n//                   ) : (\n//                     'Generate Questions'\n//                   )}\n//                 </button>\n//               </form>\n//             </section>\n//             <section className=\"questions-section\">\n//               <h2>Practice Questions</h2>\n//               {questions.length > 0 ? (\n//                 <>\n//                   <div className=\"question-select-container\">\n//                     <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n//                       <option value=\"\">Select a question</option>\n//                       {questions.map((question, index) => (\n//                         <option key={index} value={question}>\n//                           {question}\n//                         </option>\n//                       ))}\n//                     </select>\n//                     <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n//                       {isLoading ? (\n//                         <>\n//                           <i className=\"fas fa-spinner fa-spin\"></i> {loadingTextOptions[loadingTextIndex]}\n//                         </>\n//                       ) : (\n//                         'Generate Answer'\n//                       )}\n//                     </button>\n//                   </div>\n//                   {answer && (\n//                     <div className=\"answer-section\">\n//                       <h3>Sample Answer:</h3>\n//                       <p>{answer}</p>\n//                     </div>\n//                   )}\n//                 </>\n//               ) : (\n//                 <p>No questions generated yet. Upload your documents to get started.</p>\n//               )}\n//             </section>\n//           </main>\n//           <footer>\n//             <p>&copy; 2024 InterviewPrep.AI, created by Kabeer Thockchom. Powered by Groq</p>\n//           </footer>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n// export default App;\nimport React,{useState,useEffect}from'react';import'./App.css';import{loadStripe}from'@stripe/stripe-js';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const stripePromise=loadStripe('pk_live_51Oy1DbJJsI9X5jdXNQE1Z5uXkD27M43rDvEVXec7i53AKLA4L68Co1PEKVZ2G0nhCp1I6qa04N2uJpVWGvzRV6GP00Go8e27OM');function App(){const[isAuthenticated,setIsAuthenticated]=useState(false);const[isRegistered,setIsRegistered]=useState(false);const[email,setEmail]=useState('');const[password,setPassword]=useState('');const[jobDescription,setJobDescription]=useState('');const[jobPosting,setJobPosting]=useState(null);const[resume,setResume]=useState(null);const[resumeText,setResumeText]=useState('');const[selectedQuestion,setSelectedQuestion]=useState('');const[questions,setQuestions]=useState([]);const[answer,setAnswer]=useState('');const[isLoading,setIsLoading]=useState(false);const loadingTextOptions=['Generating...','Blackmailing the nerds...','Interrogating the recruiters...','Adding a touch of AI nepotism...',\"Almost there now, don't be impatient...\",\"Hey, it's at least faster than you getting a job...\"];const[loadingTextIndex,setLoadingTextIndex]=useState(0);useEffect(()=>{let interval;if(isLoading){interval=setInterval(()=>{setLoadingTextIndex(prevIndex=>(prevIndex+1)%loadingTextOptions.length);},1000);}return()=>clearInterval(interval);},[isLoading]);const handleRegister=async()=>{try{const response=await fetch('/register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();if(data.success){setIsRegistered(true);const stripe=await stripePromise;const{error}=await stripe.redirectToCheckout({lineItems:[{price:'price_1234567890',quantity:1}],mode:'payment',successUrl:'http://localhost:8080/success',cancelUrl:'http://localhost:8080/cancel',customerEmail:email});if(error){console.error('Error redirecting to Stripe Checkout:',error);}}else{alert(data.message);}}catch(error){console.error('Error registering:',error);}};const handleLogin=async()=>{try{const response=await fetch('/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();if(data.success){setIsAuthenticated(true);}else{alert(data.message);}}catch(error){console.error('Error logging in:',error);}};const handleLogout=()=>{setIsAuthenticated(false);setEmail('');setPassword('');};const handleFileChange=e=>{const{name,files}=e.target;if(name==='jobPosting'){setJobPosting(files[0]);}else{setResume(files[0]);}};const handleSubmit=async e=>{e.preventDefault();setIsLoading(true);const formData=new FormData();if(jobPosting){formData.append('job_posting',jobPosting);}if(jobDescription){formData.append('job_description',jobDescription);}formData.append('resume',resume);try{const response=await fetch('/upload',{method:'POST',body:formData});const data=await response.json();setQuestions(data.questions);setResumeText(data.resumeText);}catch(error){console.error('Error uploading files:',error);}finally{setIsLoading(false);}};const handleQuestionChange=e=>setSelectedQuestion(e.target.value);const handleGenerateAnswer=async()=>{if(!selectedQuestion||!resumeText)return;setIsLoading(true);try{const response=await fetch('/generate-answer',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({question:selectedQuestion,resume:resumeText})});const data=await response.json();setAnswer(data.answer);}catch(error){console.error('Error generating answer:',error);}finally{setIsLoading(false);}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:!isAuthenticated?/*#__PURE__*/_jsxs(\"div\",{className:\"login-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Login\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",placeholder:\"Email\",value:email,onChange:e=>setEmail(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"Password\",value:password,onChange:e=>setPassword(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogin,children:\"Login\"}),!isRegistered&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Don't have an account?\"}),/*#__PURE__*/_jsx(\"stripe-buy-button\",{\"buy-button-id\":\"buy_btn_1Oy2RQJJsI9X5jdXVIcf4EZm\",\"publishable-key\":\"pk_live_51Oy1DbJJsI9X5jdXNQE1Z5uXkD27M43rDvEVXec7i53AKLA4L68Co1PEKVZ2G0nhCp1I6qa04N2uJpVWGvzRV6GP00Go8e27OM\",onSubmit:handleRegister})]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"InterviewPrep.AI\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Ace your next interview with AI-powered preparation!\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleLogout,children:\"Logout\"})]}),/*#__PURE__*/_jsxs(\"main\",{children:[/*#__PURE__*/_jsxs(\"section\",{className:\"upload-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Upload Your Documents\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"upload-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"jobDescription\",children:\"Job Description:\"}),/*#__PURE__*/_jsx(\"textarea\",{name:\"jobDescription\",id:\"jobDescription\",value:jobDescription,onChange:e=>setJobDescription(e.target.value),placeholder:\"Enter job description\",rows:5})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-wrapper\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",name:\"jobPosting\",id:\"jobPosting\",className:\"file-input\",onChange:handleFileChange,accept:\".pdf\"}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"jobPosting\",className:\"file-upload-label\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-cloud-upload-alt\"}),\" Upload PDF of Job Description\"]}),jobPosting&&/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:jobPosting.name})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-wrapper\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",name:\"resume\",id:\"resume\",className:\"file-input\",onChange:handleFileChange,accept:\".pdf\"}),/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"resume\",className:\"file-upload-label\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-cloud-upload-alt\"}),\" Upload PDF of Resume\"]}),resume&&/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:resume.name})]})}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn-primary\",disabled:isLoading,children:isLoading?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-spinner fa-spin\"}),\" \",loadingTextOptions[loadingTextIndex]]}):'Generate Questions'})]})]}),/*#__PURE__*/_jsxs(\"section\",{className:\"questions-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Practice Questions\"}),questions.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-select-container\",children:[/*#__PURE__*/_jsxs(\"select\",{value:selectedQuestion,onChange:handleQuestionChange,className:\"question-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select a question\"}),questions.map((question,index)=>/*#__PURE__*/_jsx(\"option\",{value:question,children:question},index))]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleGenerateAnswer,className:\"btn-secondary\",disabled:isLoading,children:isLoading?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-spinner fa-spin\"}),\" \",loadingTextOptions[loadingTextIndex]]}):'Generate Answer'})]}),answer&&/*#__PURE__*/_jsxs(\"div\",{className:\"answer-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Sample Answer:\"}),/*#__PURE__*/_jsx(\"p\",{children:answer})]})]}):/*#__PURE__*/_jsx(\"p\",{children:\"No questions generated yet. Upload your documents to get started.\"})]})]}),/*#__PURE__*/_jsx(\"footer\",{children:/*#__PURE__*/_jsx(\"p\",{children:\"\\xA9 2024 InterviewPrep.AI, created by Kabeer Thockchom. Powered by Groq\"})})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","loadStripe","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","stripePromise","App","isAuthenticated","setIsAuthenticated","isRegistered","setIsRegistered","email","setEmail","password","setPassword","jobDescription","setJobDescription","jobPosting","setJobPosting","resume","setResume","resumeText","setResumeText","selectedQuestion","setSelectedQuestion","questions","setQuestions","answer","setAnswer","isLoading","setIsLoading","loadingTextOptions","loadingTextIndex","setLoadingTextIndex","interval","setInterval","prevIndex","length","clearInterval","handleRegister","response","fetch","method","headers","body","JSON","stringify","data","json","success","stripe","error","redirectToCheckout","lineItems","price","quantity","mode","successUrl","cancelUrl","customerEmail","console","alert","message","handleLogin","handleLogout","handleFileChange","e","name","files","target","handleSubmit","preventDefault","formData","FormData","append","handleQuestionChange","value","handleGenerateAnswer","question","className","children","type","placeholder","onChange","onClick","onSubmit","htmlFor","id","rows","accept","disabled","map","index"],"sources":["/Users/kabeerthockchom/Downloads/interview/job-interview-helper/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { loadStripe } from '@stripe/stripe-js';\n\n// const stripePromise = loadStripe('your_stripe_publishable_key');\n\n// function App() {\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [jobDescription, setJobDescription] = useState('');\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [resumeText, setResumeText] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const loadingTextOptions = [\n//     'Generating...',\n//     'Blackmailing the nerds...',\n//     'Interrogating the recruiters...',\n//     'Adding a touch of AI nepotism...',\n//     \"Almost there now, don't be impatient...\",\n//     \"Hey, it's at least faster than you getting a job...\",\n//   ];\n//   const [loadingTextIndex, setLoadingTextIndex] = useState(0);\n\n//   useEffect(() => {\n//     let interval;\n//     if (isLoading) {\n//       interval = setInterval(() => {\n//         setLoadingTextIndex((prevIndex) => (prevIndex + 1) % loadingTextOptions.length);\n//       }, 1000);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isLoading]);\n\n//   const handleLogin = async () => {\n//     try {\n//       const response = await fetch('/login', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ email, password }),\n//       });\n//       const data = await response.json();\n//       if (data.success) {\n//         setIsAuthenticated(true);\n//         if (email !== 'kabeerthockchom@gmail.com') {\n//           const stripe = await stripePromise;\n//           const { error } = await stripe.redirectToCheckout({\n//             lineItems: [{ price: 'price_12345', quantity: 1 }],\n//             mode: 'payment',\n//             successUrl: 'http://localhost:3000/success',\n//             cancelUrl: 'http://localhost:3000/cancel',\n//             customerEmail: email,\n//           });\n//           if (error) {\n//             console.error('Error redirecting to Stripe Checkout:', error);\n//           }\n//         }\n//       } else {\n//         alert(data.message);\n//       }\n//     } catch (error) {\n//       console.error('Error logging in:', error);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     setIsAuthenticated(false);\n//     setEmail('');\n//     setPassword('');\n//   };\n\n//   const handleFileChange = (e) => {\n//     const { name, files } = e.target;\n//     if (name === 'jobPosting') {\n//       setJobPosting(files[0]);\n//     } else {\n//       setResume(files[0]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     const formData = new FormData();\n//     if (jobPosting) {\n//       formData.append('job_posting', jobPosting);\n//     }\n//     if (jobDescription) {\n//       formData.append('job_description', jobDescription);\n//     }\n//     formData.append('resume', resume);\n\n//     try {\n//       const response = await fetch('/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//       setResumeText(data.resumeText);\n//     } catch (error) {\n//       console.error('Error uploading files:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n//   const handleGenerateAnswer = async () => {\n//     if (!selectedQuestion || !resumeText) return;\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch('/generate-answer', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n//       });\n//       const data = await response.json();\n//       setAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {!isAuthenticated ? (\n//         <div className=\"login-container\">\n//           <h2>Login</h2>\n//           <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n//           <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n//           <button onClick={handleLogin}>Login</button>\n//         </div>\n//       ) : (\n//         <>\n//           <header>\n//             <h1>InterviewPrep.AI</h1>\n//             <p>Ace your next interview with AI-powered preparation!</p>\n//             <button onClick={handleLogout}>Logout</button>\n//           </header>\n//           <main>\n//             <section className=\"upload-section\">\n//               <h2>Upload Your Documents</h2>\n//               <form onSubmit={handleSubmit} className=\"upload-form\">\n//                 <div className=\"form-group\">\n//                   <label htmlFor=\"jobDescription\">Job Description:</label>\n//                   <textarea\n//                     name=\"jobDescription\"\n//                     id=\"jobDescription\"\n//                     value={jobDescription}\n//                     onChange={(e) => setJobDescription(e.target.value)}\n//                     placeholder=\"Enter job description\"\n//                     rows={5}\n//                   ></textarea>\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <div className=\"file-upload-wrapper\">\n//                     <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//                     <label htmlFor=\"jobPosting\" className=\"file-upload-label\">\n//                       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Job Description\n//                     </label>\n//                     {jobPosting && <span className=\"file-name\">{jobPosting.name}</span>}\n//                   </div>\n//                 </div>\n//                 <div className=\"form-group\">\n//                   <div className=\"file-upload-wrapper\">\n//                     <input type=\"file\" name=\"resume\" id=\"resume\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//                     <label htmlFor=\"resume\" className=\"file-upload-label\">\n//                       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Resume\n//                     </label>\n//                     {resume && <span className=\"file-name\">{resume.name}</span>}\n//                   </div>\n//                 </div>\n//                 <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n//                   {isLoading ? (\n//                     <>\n//                       <i className=\"fas fa-spinner fa-spin\"></i> {loadingTextOptions[loadingTextIndex]}\n//                     </>\n//                   ) : (\n//                     'Generate Questions'\n//                   )}\n//                 </button>\n//               </form>\n//             </section>\n//             <section className=\"questions-section\">\n//               <h2>Practice Questions</h2>\n//               {questions.length > 0 ? (\n//                 <>\n//                   <div className=\"question-select-container\">\n//                     <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n//                       <option value=\"\">Select a question</option>\n//                       {questions.map((question, index) => (\n//                         <option key={index} value={question}>\n//                           {question}\n//                         </option>\n//                       ))}\n//                     </select>\n//                     <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n//                       {isLoading ? (\n//                         <>\n//                           <i className=\"fas fa-spinner fa-spin\"></i> {loadingTextOptions[loadingTextIndex]}\n//                         </>\n//                       ) : (\n//                         'Generate Answer'\n//                       )}\n//                     </button>\n//                   </div>\n//                   {answer && (\n//                     <div className=\"answer-section\">\n//                       <h3>Sample Answer:</h3>\n//                       <p>{answer}</p>\n//                     </div>\n//                   )}\n//                 </>\n//               ) : (\n//                 <p>No questions generated yet. Upload your documents to get started.</p>\n//               )}\n//             </section>\n//           </main>\n//           <footer>\n//             <p>&copy; 2024 InterviewPrep.AI, created by Kabeer Thockchom. Powered by Groq</p>\n//           </footer>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { loadStripe } from '@stripe/stripe-js';\n\nconst stripePromise = loadStripe('pk_live_51Oy1DbJJsI9X5jdXNQE1Z5uXkD27M43rDvEVXec7i53AKLA4L68Co1PEKVZ2G0nhCp1I6qa04N2uJpVWGvzRV6GP00Go8e27OM');\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [jobDescription, setJobDescription] = useState('');\n  const [jobPosting, setJobPosting] = useState(null);\n  const [resume, setResume] = useState(null);\n  const [resumeText, setResumeText] = useState('');\n  const [selectedQuestion, setSelectedQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const loadingTextOptions = [\n    'Generating...',\n    'Blackmailing the nerds...',\n    'Interrogating the recruiters...',\n    'Adding a touch of AI nepotism...',\n    \"Almost there now, don't be impatient...\",\n    \"Hey, it's at least faster than you getting a job...\",\n  ];\n  const [loadingTextIndex, setLoadingTextIndex] = useState(0);\n\n  useEffect(() => {\n    let interval;\n    if (isLoading) {\n      interval = setInterval(() => {\n        setLoadingTextIndex((prevIndex) => (prevIndex + 1) % loadingTextOptions.length);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isLoading]);\n\n  const handleRegister = async () => {\n    try {\n      const response = await fetch('/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await response.json();\n      if (data.success) {\n        setIsRegistered(true);\n        const stripe = await stripePromise;\n        const { error } = await stripe.redirectToCheckout({\n          lineItems: [{ price: 'price_1234567890', quantity: 1 }],\n          mode: 'payment',\n          successUrl: 'http://localhost:8080/success',\n          cancelUrl: 'http://localhost:8080/cancel',\n          customerEmail: email,\n        });\n        if (error) {\n          console.error('Error redirecting to Stripe Checkout:', error);\n        }\n      } else {\n        alert(data.message);\n      }\n    } catch (error) {\n      console.error('Error registering:', error);\n    }\n  };\n\n  const handleLogin = async () => {\n    try {\n      const response = await fetch('/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await response.json();\n      if (data.success) {\n        setIsAuthenticated(true);\n      } else {\n        alert(data.message);\n      }\n    } catch (error) {\n      console.error('Error logging in:', error);\n    }\n  };\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleFileChange = (e) => {\n    const { name, files } = e.target;\n    if (name === 'jobPosting') {\n      setJobPosting(files[0]);\n    } else {\n      setResume(files[0]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const formData = new FormData();\n    if (jobPosting) {\n      formData.append('job_posting', jobPosting);\n    }\n    if (jobDescription) {\n      formData.append('job_description', jobDescription);\n    }\n    formData.append('resume', resume);\n\n    try {\n      const response = await fetch('/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      setQuestions(data.questions);\n      setResumeText(data.resumeText);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n  const handleGenerateAnswer = async () => {\n    if (!selectedQuestion || !resumeText) return;\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/generate-answer', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n      });\n      const data = await response.json();\n      setAnswer(data.answer);\n    } catch (error) {\n      console.error('Error generating answer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!isAuthenticated ? (\n        <div className=\"login-container\">\n          <h2>Login</h2>\n          <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n          <button onClick={handleLogin}>Login</button>\n          {!isRegistered && (\n            <>\n              <p>Don't have an account?</p>\n              <stripe-buy-button\n                buy-button-id=\"buy_btn_1Oy2RQJJsI9X5jdXVIcf4EZm\"\n                publishable-key=\"pk_live_51Oy1DbJJsI9X5jdXNQE1Z5uXkD27M43rDvEVXec7i53AKLA4L68Co1PEKVZ2G0nhCp1I6qa04N2uJpVWGvzRV6GP00Go8e27OM\"\n                onSubmit={handleRegister}\n              />\n            </>\n          )}\n        </div>\n      ) : (\n        <>\n          <header>\n            <h1>InterviewPrep.AI</h1>\n            <p>Ace your next interview with AI-powered preparation!</p>\n            <button onClick={handleLogout}>Logout</button>\n          </header>\n          <main>\n            <section className=\"upload-section\">\n              <h2>Upload Your Documents</h2>\n              <form onSubmit={handleSubmit} className=\"upload-form\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"jobDescription\">Job Description:</label>\n                  <textarea\n                    name=\"jobDescription\"\n                    id=\"jobDescription\"\n                    value={jobDescription}\n                    onChange={(e) => setJobDescription(e.target.value)}\n                    placeholder=\"Enter job description\"\n                    rows={5}\n                  ></textarea>\n                </div>\n                <div className=\"form-group\">\n                  <div className=\"file-upload-wrapper\">\n                    <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n                    <label htmlFor=\"jobPosting\" className=\"file-upload-label\">\n                      <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Job Description\n                    </label>\n                    {jobPosting && <span className=\"file-name\">{jobPosting.name}</span>}\n                  </div>\n                </div>\n                <div className=\"form-group\">\n                  <div className=\"file-upload-wrapper\">\n                    <input type=\"file\" name=\"resume\" id=\"resume\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n                    <label htmlFor=\"resume\" className=\"file-upload-label\">\n                      <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Resume\n                    </label>\n                    {resume && <span className=\"file-name\">{resume.name}</span>}\n                  </div>\n                </div>\n                <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n                  {isLoading ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin\"></i> {loadingTextOptions[loadingTextIndex]}\n                    </>\n                  ) : (\n                    'Generate Questions'\n                  )}\n                </button>\n              </form>\n            </section>\n            <section className=\"questions-section\">\n              <h2>Practice Questions</h2>\n              {questions.length > 0 ? (\n                <>\n                  <div className=\"question-select-container\">\n                    <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n                      <option value=\"\">Select a question</option>\n                      {questions.map((question, index) => (\n                        <option key={index} value={question}>\n                          {question}\n                        </option>\n                      ))}\n                    </select>\n                    <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n                      {isLoading ? (\n                        <>\n                          <i className=\"fas fa-spinner fa-spin\"></i> {loadingTextOptions[loadingTextIndex]}\n                        </>\n                      ) : (\n                        'Generate Answer'\n                      )}\n                    </button>\n                  </div>\n                  {answer && (\n                    <div className=\"answer-section\">\n                      <h3>Sample Answer:</h3>\n                      <p>{answer}</p>\n                    </div>\n                  )}\n                </>\n              ) : (\n                <p>No questions generated yet. Upload your documents to get started.</p>\n              )}\n            </section>\n          </main>\n          <footer>\n            <p>&copy; 2024 InterviewPrep.AI, created by Kabeer Thockchom. Powered by Groq</p>\n          </footer>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,WAAW,CAClB,OAASC,UAAU,KAAQ,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE/C,KAAM,CAAAC,aAAa,CAAGP,UAAU,CAAC,6GAA6G,CAAC,CAE/I,QAAS,CAAAQ,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAC7D,KAAM,CAACa,YAAY,CAAEC,eAAe,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACe,KAAK,CAAEC,QAAQ,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACiB,QAAQ,CAAEC,WAAW,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACmB,cAAc,CAAEC,iBAAiB,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACqB,UAAU,CAAEC,aAAa,CAAC,CAAGtB,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAACuB,MAAM,CAAEC,SAAS,CAAC,CAAGxB,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACyB,UAAU,CAAEC,aAAa,CAAC,CAAG1B,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAAC2B,gBAAgB,CAAEC,mBAAmB,CAAC,CAAG5B,QAAQ,CAAC,EAAE,CAAC,CAC5D,KAAM,CAAC6B,SAAS,CAAEC,YAAY,CAAC,CAAG9B,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAAC+B,MAAM,CAAEC,SAAS,CAAC,CAAGhC,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACiC,SAAS,CAAEC,YAAY,CAAC,CAAGlC,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAAmC,kBAAkB,CAAG,CACzB,eAAe,CACf,2BAA2B,CAC3B,iCAAiC,CACjC,kCAAkC,CAClC,yCAAyC,CACzC,qDAAqD,CACtD,CACD,KAAM,CAACC,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGrC,QAAQ,CAAC,CAAC,CAAC,CAE3DC,SAAS,CAAC,IAAM,CACd,GAAI,CAAAqC,QAAQ,CACZ,GAAIL,SAAS,CAAE,CACbK,QAAQ,CAAGC,WAAW,CAAC,IAAM,CAC3BF,mBAAmB,CAAEG,SAAS,EAAK,CAACA,SAAS,CAAG,CAAC,EAAIL,kBAAkB,CAACM,MAAM,CAAC,CACjF,CAAC,CAAE,IAAI,CAAC,CACV,CACA,MAAO,IAAMC,aAAa,CAACJ,QAAQ,CAAC,CACtC,CAAC,CAAE,CAACL,SAAS,CAAC,CAAC,CAEf,KAAM,CAAAU,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,WAAW,CAAE,CACxCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEnC,KAAK,CAAEE,QAAS,CAAC,CAC1C,CAAC,CAAC,CACF,KAAM,CAAAkC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC,GAAID,IAAI,CAACE,OAAO,CAAE,CAChBvC,eAAe,CAAC,IAAI,CAAC,CACrB,KAAM,CAAAwC,MAAM,CAAG,KAAM,CAAA7C,aAAa,CAClC,KAAM,CAAE8C,KAAM,CAAC,CAAG,KAAM,CAAAD,MAAM,CAACE,kBAAkB,CAAC,CAChDC,SAAS,CAAE,CAAC,CAAEC,KAAK,CAAE,kBAAkB,CAAEC,QAAQ,CAAE,CAAE,CAAC,CAAC,CACvDC,IAAI,CAAE,SAAS,CACfC,UAAU,CAAE,+BAA+B,CAC3CC,SAAS,CAAE,8BAA8B,CACzCC,aAAa,CAAEhD,KACjB,CAAC,CAAC,CACF,GAAIwC,KAAK,CAAE,CACTS,OAAO,CAACT,KAAK,CAAC,uCAAuC,CAAEA,KAAK,CAAC,CAC/D,CACF,CAAC,IAAM,CACLU,KAAK,CAACd,IAAI,CAACe,OAAO,CAAC,CACrB,CACF,CAAE,MAAOX,KAAK,CAAE,CACdS,OAAO,CAACT,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC5C,CACF,CAAC,CAED,KAAM,CAAAY,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACF,KAAM,CAAAvB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,QAAQ,CAAE,CACrCC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEnC,KAAK,CAAEE,QAAS,CAAC,CAC1C,CAAC,CAAC,CACF,KAAM,CAAAkC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClC,GAAID,IAAI,CAACE,OAAO,CAAE,CAChBzC,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,IAAM,CACLqD,KAAK,CAACd,IAAI,CAACe,OAAO,CAAC,CACrB,CACF,CAAE,MAAOX,KAAK,CAAE,CACdS,OAAO,CAACT,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAC3C,CACF,CAAC,CAED,KAAM,CAAAa,YAAY,CAAGA,CAAA,GAAM,CACzBxD,kBAAkB,CAAC,KAAK,CAAC,CACzBI,QAAQ,CAAC,EAAE,CAAC,CACZE,WAAW,CAAC,EAAE,CAAC,CACjB,CAAC,CAED,KAAM,CAAAmD,gBAAgB,CAAIC,CAAC,EAAK,CAC9B,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAGF,CAAC,CAACG,MAAM,CAChC,GAAIF,IAAI,GAAK,YAAY,CAAE,CACzBjD,aAAa,CAACkD,KAAK,CAAC,CAAC,CAAC,CAAC,CACzB,CAAC,IAAM,CACLhD,SAAS,CAACgD,KAAK,CAAC,CAAC,CAAC,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAE,YAAY,CAAG,KAAO,CAAAJ,CAAC,EAAK,CAChCA,CAAC,CAACK,cAAc,CAAC,CAAC,CAClBzC,YAAY,CAAC,IAAI,CAAC,CAElB,KAAM,CAAA0C,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/B,GAAIxD,UAAU,CAAE,CACduD,QAAQ,CAACE,MAAM,CAAC,aAAa,CAAEzD,UAAU,CAAC,CAC5C,CACA,GAAIF,cAAc,CAAE,CAClByD,QAAQ,CAACE,MAAM,CAAC,iBAAiB,CAAE3D,cAAc,CAAC,CACpD,CACAyD,QAAQ,CAACE,MAAM,CAAC,QAAQ,CAAEvD,MAAM,CAAC,CAEjC,GAAI,CACF,KAAM,CAAAqB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,SAAS,CAAE,CACtCC,MAAM,CAAE,MAAM,CACdE,IAAI,CAAE4B,QACR,CAAC,CAAC,CACF,KAAM,CAAAzB,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClCtB,YAAY,CAACqB,IAAI,CAACtB,SAAS,CAAC,CAC5BH,aAAa,CAACyB,IAAI,CAAC1B,UAAU,CAAC,CAChC,CAAE,MAAO8B,KAAK,CAAE,CACdS,OAAO,CAACT,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CAAC,OAAS,CACRrB,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAA6C,oBAAoB,CAAIT,CAAC,EAAK1C,mBAAmB,CAAC0C,CAAC,CAACG,MAAM,CAACO,KAAK,CAAC,CAEvE,KAAM,CAAAC,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CAACtD,gBAAgB,EAAI,CAACF,UAAU,CAAE,OACtCS,YAAY,CAAC,IAAI,CAAC,CAElB,GAAI,CACF,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,kBAAkB,CAAE,CAC/CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEgC,QAAQ,CAAEvD,gBAAgB,CAAEJ,MAAM,CAAEE,UAAW,CAAC,CACzE,CAAC,CAAC,CACF,KAAM,CAAA0B,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAClCpB,SAAS,CAACmB,IAAI,CAACpB,MAAM,CAAC,CACxB,CAAE,MAAOwB,KAAK,CAAE,CACdS,OAAO,CAACT,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CAAC,OAAS,CACRrB,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,mBACE9B,IAAA,QAAK+E,SAAS,CAAC,KAAK,CAAAC,QAAA,CACjB,CAACzE,eAAe,cACfH,KAAA,QAAK2E,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BhF,IAAA,OAAAgF,QAAA,CAAI,OAAK,CAAI,CAAC,cACdhF,IAAA,UAAOiF,IAAI,CAAC,OAAO,CAACC,WAAW,CAAC,OAAO,CAACN,KAAK,CAAEjE,KAAM,CAACwE,QAAQ,CAAGjB,CAAC,EAAKtD,QAAQ,CAACsD,CAAC,CAACG,MAAM,CAACO,KAAK,CAAE,CAAE,CAAC,cACnG5E,IAAA,UAAOiF,IAAI,CAAC,UAAU,CAACC,WAAW,CAAC,UAAU,CAACN,KAAK,CAAE/D,QAAS,CAACsE,QAAQ,CAAGjB,CAAC,EAAKpD,WAAW,CAACoD,CAAC,CAACG,MAAM,CAACO,KAAK,CAAE,CAAE,CAAC,cAC/G5E,IAAA,WAAQoF,OAAO,CAAErB,WAAY,CAAAiB,QAAA,CAAC,OAAK,CAAQ,CAAC,CAC3C,CAACvE,YAAY,eACZL,KAAA,CAAAF,SAAA,EAAA8E,QAAA,eACEhF,IAAA,MAAAgF,QAAA,CAAG,wBAAsB,CAAG,CAAC,cAC7BhF,IAAA,sBACE,gBAAc,kCAAkC,CAChD,kBAAgB,6GAA6G,CAC7HqF,QAAQ,CAAE9C,cAAe,CAC1B,CAAC,EACF,CACH,EACE,CAAC,cAENnC,KAAA,CAAAF,SAAA,EAAA8E,QAAA,eACE5E,KAAA,WAAA4E,QAAA,eACEhF,IAAA,OAAAgF,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzBhF,IAAA,MAAAgF,QAAA,CAAG,sDAAoD,CAAG,CAAC,cAC3DhF,IAAA,WAAQoF,OAAO,CAAEpB,YAAa,CAAAgB,QAAA,CAAC,QAAM,CAAQ,CAAC,EACxC,CAAC,cACT5E,KAAA,SAAA4E,QAAA,eACE5E,KAAA,YAAS2E,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eACjChF,IAAA,OAAAgF,QAAA,CAAI,uBAAqB,CAAI,CAAC,cAC9B5E,KAAA,SAAMiF,QAAQ,CAAEf,YAAa,CAACS,SAAS,CAAC,aAAa,CAAAC,QAAA,eACnD5E,KAAA,QAAK2E,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzBhF,IAAA,UAAOsF,OAAO,CAAC,gBAAgB,CAAAN,QAAA,CAAC,kBAAgB,CAAO,CAAC,cACxDhF,IAAA,aACEmE,IAAI,CAAC,gBAAgB,CACrBoB,EAAE,CAAC,gBAAgB,CACnBX,KAAK,CAAE7D,cAAe,CACtBoE,QAAQ,CAAGjB,CAAC,EAAKlD,iBAAiB,CAACkD,CAAC,CAACG,MAAM,CAACO,KAAK,CAAE,CACnDM,WAAW,CAAC,uBAAuB,CACnCM,IAAI,CAAE,CAAE,CACC,CAAC,EACT,CAAC,cACNxF,IAAA,QAAK+E,SAAS,CAAC,YAAY,CAAAC,QAAA,cACzB5E,KAAA,QAAK2E,SAAS,CAAC,qBAAqB,CAAAC,QAAA,eAClChF,IAAA,UAAOiF,IAAI,CAAC,MAAM,CAACd,IAAI,CAAC,YAAY,CAACoB,EAAE,CAAC,YAAY,CAACR,SAAS,CAAC,YAAY,CAACI,QAAQ,CAAElB,gBAAiB,CAACwB,MAAM,CAAC,MAAM,CAAE,CAAC,cACxHrF,KAAA,UAAOkF,OAAO,CAAC,YAAY,CAACP,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eACvDhF,IAAA,MAAG+E,SAAS,CAAC,yBAAyB,CAAI,CAAC,iCAC7C,EAAO,CAAC,CACP9D,UAAU,eAAIjB,IAAA,SAAM+E,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAE/D,UAAU,CAACkD,IAAI,CAAO,CAAC,EAChE,CAAC,CACH,CAAC,cACNnE,IAAA,QAAK+E,SAAS,CAAC,YAAY,CAAAC,QAAA,cACzB5E,KAAA,QAAK2E,SAAS,CAAC,qBAAqB,CAAAC,QAAA,eAClChF,IAAA,UAAOiF,IAAI,CAAC,MAAM,CAACd,IAAI,CAAC,QAAQ,CAACoB,EAAE,CAAC,QAAQ,CAACR,SAAS,CAAC,YAAY,CAACI,QAAQ,CAAElB,gBAAiB,CAACwB,MAAM,CAAC,MAAM,CAAE,CAAC,cAChHrF,KAAA,UAAOkF,OAAO,CAAC,QAAQ,CAACP,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eACnDhF,IAAA,MAAG+E,SAAS,CAAC,yBAAyB,CAAI,CAAC,wBAC7C,EAAO,CAAC,CACP5D,MAAM,eAAInB,IAAA,SAAM+E,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAE7D,MAAM,CAACgD,IAAI,CAAO,CAAC,EACxD,CAAC,CACH,CAAC,cACNnE,IAAA,WAAQiF,IAAI,CAAC,QAAQ,CAACF,SAAS,CAAC,aAAa,CAACW,QAAQ,CAAE7D,SAAU,CAAAmD,QAAA,CAC/DnD,SAAS,cACRzB,KAAA,CAAAF,SAAA,EAAA8E,QAAA,eACEhF,IAAA,MAAG+E,SAAS,CAAC,wBAAwB,CAAI,CAAC,IAAC,CAAChD,kBAAkB,CAACC,gBAAgB,CAAC,EAChF,CAAC,CAEH,oBACD,CACK,CAAC,EACL,CAAC,EACA,CAAC,cACV5B,KAAA,YAAS2E,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eACpChF,IAAA,OAAAgF,QAAA,CAAI,oBAAkB,CAAI,CAAC,CAC1BvD,SAAS,CAACY,MAAM,CAAG,CAAC,cACnBjC,KAAA,CAAAF,SAAA,EAAA8E,QAAA,eACE5E,KAAA,QAAK2E,SAAS,CAAC,2BAA2B,CAAAC,QAAA,eACxC5E,KAAA,WAAQwE,KAAK,CAAErD,gBAAiB,CAAC4D,QAAQ,CAAER,oBAAqB,CAACI,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC1FhF,IAAA,WAAQ4E,KAAK,CAAC,EAAE,CAAAI,QAAA,CAAC,mBAAiB,CAAQ,CAAC,CAC1CvD,SAAS,CAACkE,GAAG,CAAC,CAACb,QAAQ,CAAEc,KAAK,gBAC7B5F,IAAA,WAAoB4E,KAAK,CAAEE,QAAS,CAAAE,QAAA,CACjCF,QAAQ,EADEc,KAEL,CACT,CAAC,EACI,CAAC,cACT5F,IAAA,WAAQoF,OAAO,CAAEP,oBAAqB,CAACE,SAAS,CAAC,eAAe,CAACW,QAAQ,CAAE7D,SAAU,CAAAmD,QAAA,CAClFnD,SAAS,cACRzB,KAAA,CAAAF,SAAA,EAAA8E,QAAA,eACEhF,IAAA,MAAG+E,SAAS,CAAC,wBAAwB,CAAI,CAAC,IAAC,CAAChD,kBAAkB,CAACC,gBAAgB,CAAC,EAChF,CAAC,CAEH,iBACD,CACK,CAAC,EACN,CAAC,CACLL,MAAM,eACLvB,KAAA,QAAK2E,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BhF,IAAA,OAAAgF,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvBhF,IAAA,MAAAgF,QAAA,CAAIrD,MAAM,CAAI,CAAC,EACZ,CACN,EACD,CAAC,cAEH3B,IAAA,MAAAgF,QAAA,CAAG,mEAAiE,CAAG,CACxE,EACM,CAAC,EACN,CAAC,cACPhF,IAAA,WAAAgF,QAAA,cACEhF,IAAA,MAAAgF,QAAA,CAAG,0EAA0E,CAAG,CAAC,CAC3E,CAAC,EACT,CACH,CACE,CAAC,CAEV,CAEA,cAAe,CAAA1E,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}