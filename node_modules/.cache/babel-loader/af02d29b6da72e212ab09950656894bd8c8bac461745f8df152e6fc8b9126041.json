{"ast":null,"code":"// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [jobDescription, setJobDescription] = useState('');\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [resumeText, setResumeText] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const loadingTextOptions = [\n//     'Generating...',\n//     'Blackmailing the nerds...',\n//     'Interrogating the recruiters...',\n//     'Adding a touch of AI nepotism...',\n//     \"Almost there now, don't be impatient...\",\n//     \"Hey, it's at least faster than you getting a job...\",\n//   ];\n//   const [loadingTextIndex, setLoadingTextIndex] = useState(0);\n\n//   const handleFileChange = (e) => {\n//     const { name, files } = e.target;\n//     if (name === 'jobPosting') {\n//       setJobPosting(files[0]);\n//     } else {\n//       setResume(files[0]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     const formData = new FormData();\n//     if (jobPosting) {\n//       formData.append('job_posting', jobPosting);\n//     }\n//     if (jobDescription) {\n//       formData.append('job_description', jobDescription);\n//     }\n//     formData.append('resume', resume);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//       setResumeText(data.resumeText);\n//     } catch (error) {\n//       console.error('Error uploading files:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n//   const handleGenerateAnswer = async () => {\n//     if (!selectedQuestion || !resumeText) return;\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n//       });\n//       const data = await response.json();\n//       setAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header>\n//         <h1>InterviewPrep.AI</h1>\n//         <p>Ace your next interview with AI-powered preparation!</p>\n//       </header>\n//       <main>\n//         <section className=\"upload-section\">\n//           <h2>Upload Your Documents</h2>\n//           <form onSubmit={handleSubmit} className=\"upload-form\">\n//             <div className=\"form-group\">\n//               <label htmlFor=\"jobDescription\">Job Description:</label>\n//               <textarea\n//                 name=\"jobDescription\"\n//                 id=\"jobDescription\"\n//                 value={jobDescription}\n//                 onChange={(e) => setJobDescription(e.target.value)}\n//                 placeholder=\"Enter job description\"\n//                 rows={5}\n//               ></textarea>\n//             </div>\n//             <div className=\"form-group\">\n//   <div className=\"file-upload-wrapper\">\n//     <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//     <label htmlFor=\"jobPosting\" className=\"file-upload-label\">\n//       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Job Description\n//     </label>\n//     {jobPosting && <span className=\"file-name\">{jobPosting.name}</span>}\n//   </div>\n// </div>\n// <div className=\"form-group\">\n//   <div className=\"file-upload-wrapper\">\n//     <input type=\"file\" name=\"resume\" id=\"resume\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//     <label htmlFor=\"resume\" className=\"file-upload-label\">\n//       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Resume\n//     </label>\n//     {resume && <span className=\"file-name\">{resume.name}</span>}\n//   </div>\n// </div>\n//             <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n//               {isLoading ? (\n//                 <>\n//                   <i className=\"fas fa-spinner fa-spin\"></i> Generating...\n//                 </>\n//               ) : (\n//                 'Generate Questions'\n//               )}\n//             </button>\n//           </form>\n//         </section>\n//         <section className=\"questions-section\">\n//           <h2>Practice Questions</h2>\n//           {questions.length > 0 ? (\n//             <>\n//               <div className=\"question-select-container\">\n//                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n//                   <option value=\"\">Select a question</option>\n//                   {questions.map((question, index) => (\n//                     <option key={index} value={question}>\n//                       {question}\n//                     </option>\n//                   ))}\n//                 </select>\n//                 <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n//                   {isLoading ? (\n//                     <>\n//                       <i className=\"fas fa-spinner fa-spin\"></i> Generating...\n//                     </>\n//                   ) : (\n//                     'Generate Answer'\n//                   )}\n//                 </button>\n//               </div>\n//               {answer && (\n//                 <div className=\"answer-section\">\n//                   <h3>Sample Answer:</h3>\n//                   <p>{answer}</p>\n//                 </div>\n//               )}\n//             </>\n//           ) : (\n//             <p>No questions generated yet. Upload your documents to get started.</p>\n//           )}\n//         </section>\n//       </main>\n//       <footer>\n//         <p>&copy; 2024 InterviewPrep.AI, created by Kabeer Thockchom. Powered by Groq</p>\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/kabeerthockchom/Downloads/interview/job-interview-helper/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [jobDescription, setJobDescription] = useState('');\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [resumeText, setResumeText] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n//   const loadingTextOptions = [\n//     'Generating...',\n//     'Blackmailing the nerds...',\n//     'Interrogating the recruiters...',\n//     'Adding a touch of AI nepotism...',\n//     \"Almost there now, don't be impatient...\",\n//     \"Hey, it's at least faster than you getting a job...\",\n//   ];\n//   const [loadingTextIndex, setLoadingTextIndex] = useState(0);\n\n//   const handleFileChange = (e) => {\n//     const { name, files } = e.target;\n//     if (name === 'jobPosting') {\n//       setJobPosting(files[0]);\n//     } else {\n//       setResume(files[0]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     const formData = new FormData();\n//     if (jobPosting) {\n//       formData.append('job_posting', jobPosting);\n//     }\n//     if (jobDescription) {\n//       formData.append('job_description', jobDescription);\n//     }\n//     formData.append('resume', resume);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//       setResumeText(data.resumeText);\n//     } catch (error) {\n//       console.error('Error uploading files:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n//   const handleGenerateAnswer = async () => {\n//     if (!selectedQuestion || !resumeText) return;\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n//       });\n//       const data = await response.json();\n//       setAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header>\n//         <h1>InterviewPrep.AI</h1>\n//         <p>Ace your next interview with AI-powered preparation!</p>\n//       </header>\n//       <main>\n//         <section className=\"upload-section\">\n//           <h2>Upload Your Documents</h2>\n//           <form onSubmit={handleSubmit} className=\"upload-form\">\n//             <div className=\"form-group\">\n//               <label htmlFor=\"jobDescription\">Job Description:</label>\n//               <textarea\n//                 name=\"jobDescription\"\n//                 id=\"jobDescription\"\n//                 value={jobDescription}\n//                 onChange={(e) => setJobDescription(e.target.value)}\n//                 placeholder=\"Enter job description\"\n//                 rows={5}\n//               ></textarea>\n//             </div>\n//             <div className=\"form-group\">\n//   <div className=\"file-upload-wrapper\">\n//     <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//     <label htmlFor=\"jobPosting\" className=\"file-upload-label\">\n//       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Job Description\n//     </label>\n//     {jobPosting && <span className=\"file-name\">{jobPosting.name}</span>}\n//   </div>\n// </div>\n// <div className=\"form-group\">\n//   <div className=\"file-upload-wrapper\">\n//     <input type=\"file\" name=\"resume\" id=\"resume\" className=\"file-input\" onChange={handleFileChange} accept=\".pdf\" />\n//     <label htmlFor=\"resume\" className=\"file-upload-label\">\n//       <i className=\"fas fa-cloud-upload-alt\"></i> Upload PDF of Resume\n//     </label>\n//     {resume && <span className=\"file-name\">{resume.name}</span>}\n//   </div>\n// </div>\n//             <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n//               {isLoading ? (\n//                 <>\n//                   <i className=\"fas fa-spinner fa-spin\"></i> Generating...\n//                 </>\n//               ) : (\n//                 'Generate Questions'\n//               )}\n//             </button>\n//           </form>\n//         </section>\n//         <section className=\"questions-section\">\n//           <h2>Practice Questions</h2>\n//           {questions.length > 0 ? (\n//             <>\n//               <div className=\"question-select-container\">\n//                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n//                   <option value=\"\">Select a question</option>\n//                   {questions.map((question, index) => (\n//                     <option key={index} value={question}>\n//                       {question}\n//                     </option>\n//                   ))}\n//                 </select>\n//                 <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n//                   {isLoading ? (\n//                     <>\n//                       <i className=\"fas fa-spinner fa-spin\"></i> Generating...\n//                     </>\n//                   ) : (\n//                     'Generate Answer'\n//                   )}\n//                 </button>\n//               </div>\n//               {answer && (\n//                 <div className=\"answer-section\">\n//                   <h3>Sample Answer:</h3>\n//                   <p>{answer}</p>\n//                 </div>\n//               )}\n//             </>\n//           ) : (\n//             <p>No questions generated yet. Upload your documents to get started.</p>\n//           )}\n//         </section>\n//       </main>\n//       <footer>\n//         <p>&copy; 2024 InterviewPrep.AI, created by Kabeer Thockchom. Powered by Groq</p>\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}