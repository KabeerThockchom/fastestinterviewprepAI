{"ast":null,"code":"var _jsxFileName = \"/Users/kabeerthockchom/interview helper/job-interview-helper/src/App.js\",\n  _s = $RefreshSig$();\n// // // import React, { useState } from 'react';\n// // // import './App.css';\n\n// // // function App() {\n// // //   const [jobPostingUrl, setJobPostingUrl] = useState('');\n// // //   const [jobPosting, setJobPosting] = useState(null);\n// // //   const [resume, setResume] = useState(null);\n// // //   const [resumeText, setResumeText] = useState('');\n// // //   const [selectedQuestion, setSelectedQuestion] = useState('');\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [answer, setAnswer] = useState('');\n// // //   const [isLoading, setIsLoading] = useState(false);\n\n// // //   const handleFileChange = (e) => {\n// // //     const { name, files, value } = e.target;\n// // //     if (name === 'jobPosting') {\n// // //       setJobPosting(files[0]);\n// // //     } else if (name === 'jobPostingUrl') {\n// // //       setJobPostingUrl(value);\n// // //     } else {\n// // //       setResume(files[0]);\n// // //     }\n// // //   };\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setIsLoading(true);\n\n// // //     const formData = new FormData();\n// // //     if (jobPosting) {\n// // //       formData.append('job_posting', jobPosting);\n// // //     } else if (jobPostingUrl) {\n// // //       formData.append('job_posting_url', jobPostingUrl);\n// // //     }\n// // //     formData.append('resume', resume);\n\n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// // //         method: 'POST',\n// // //         body: formData,\n// // //       });\n// // //       const data = await response.json();\n// // //       setQuestions(data.questions);\n// // //       setResumeText(data.resumeText);\n// // //     } catch (error) {\n// // //       console.error('Error uploading files:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n// // //   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n// // //   const handleGenerateAnswer = async () => {\n// // //     if (!selectedQuestion || !resumeText) return;\n// // //     setIsLoading(true);\n\n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n// // //         method: 'POST',\n// // //         headers: { 'Content-Type': 'application/json' },\n// // //         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n// // //       });\n// // //       const data = await response.json();\n// // //       setAnswer(data.answer);\n// // //     } catch (error) {\n// // //       console.error('Error generating answer:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       <header>\n// // //         <h1>Fastest 100 Question Interview Prep in the World!</h1>\n// // //       </header>\n// // //       <main>\n// // //         <div className=\"content-container\">\n// // //         <div className=\"upload-section\">\n// // //   <h2>Get Started by Uploading:</h2>\n// // //   <form onSubmit={handleSubmit} className=\"upload-form\">\n// // //     <div className=\"file-input\">\n// // //       <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n// // //       <input\n// // //         type=\"text\"\n// // //         name=\"jobPostingUrl\"\n// // //         id=\"jobPostingUrl\"\n// // //         value={jobPostingUrl}\n// // //         onChange={handleFileChange}\n// // //         placeholder=\"Enter Google Jobs URL\"\n// // //       />\n// // //     </div>\n// // //     <div className=\"file-input\">\n// // //       <label htmlFor=\"jobPosting\" className=\"custom-file-upload\">\n// // //         <i className=\"fas fa-file-pdf\"></i> Upload Job Posting PDF\n// // //       </label>\n// // //       <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n// // //       {jobPosting && <p>Uploaded: {jobPosting.name}</p>}\n// // //     </div>\n// // //     <div className=\"file-input\">\n// // //       <label htmlFor=\"resume\" className=\"custom-file-upload\">\n// // //         <i className=\"fas fa-file-pdf\"></i> Upload Resume PDF\n// // //       </label>\n// // //       <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n// // //       {resume && <p>Uploaded: {resume.name}</p>}\n// // //     </div>\n// // //     <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n// // //       {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Questions'}\n// // //     </button>\n// // //   </form>\n// // // </div>\n// // //           <div className=\"questions-answer-container\">\n// // //             {questions.length > 0 && (\n// // //               <div className=\"questions-section\">\n// // //                 <h2>Choose a Question to Practice</h2>\n// // //                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n// // //                   <option value=\"\">Select a Question</option>\n// // //                   {questions.map((question, index) => (\n// // //                     <option key={index} value={question}>\n// // //                       {question}\n// // //                     </option>\n// // //                   ))}\n// // //                 </select>\n// // //                 <button onClick={handleGenerateAnswer} className=\"generate-btn\" disabled={isLoading}>\n// // //                   {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Answer'}\n// // //                 </button>\n// // //               </div>\n// // //             )}\n// // //             {answer && (\n// // //               <div className=\"answer-section\">\n// // //                 <h2>Your Sample Answer</h2>\n// // //                 <p>{answer}</p>\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       </main>\n// // //       <footer>\n// // //   <p>\n// // //     Powered by Groq:{' '}\n// // //     <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1\" target=\"_blank\" rel=\"noopener noreferrer\">\n// // //       Mixtral-8x7b-Instruct-v0.1\n// // //     </a>\n// // //   </p>\n// // // </footer>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default App;\n\n// // // import React, { useState } from 'react';\n// // // import './App.css';\n\n// // // function App() {\n// // //   const [jobPostingUrl, setJobPostingUrl] = useState('');\n// // //   const [jobPosting, setJobPosting] = useState(null);\n// // //   const [resume, setResume] = useState(null);\n// // //   const [resumeText, setResumeText] = useState('');\n// // //   const [selectedQuestion, setSelectedQuestion] = useState('');\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [answer, setAnswer] = useState('');\n// // //   const [isLoading, setIsLoading] = useState(false);\n\n// // //   const handleFileChange = (e) => {\n// // //     const { name, files, value } = e.target;\n// // //     if (name === 'jobPosting') {\n// // //       setJobPosting(files[0]);\n// // //     } else if (name === 'jobPostingUrl') {\n// // //       setJobPostingUrl(value);\n// // //     } else {\n// // //       setResume(files[0]);\n// // //     }\n// // //   };\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setIsLoading(true);\n\n// // //     const formData = new FormData();\n// // //     if (jobPosting) {\n// // //       formData.append('job_posting', jobPosting);\n// // //     }\n// // //     if (jobPostingUrl) {\n// // //       formData.append('job_posting_url', jobPostingUrl);\n// // //     }\n// // //     formData.append('resume', resume);\n\n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// // //         method: 'POST',\n// // //         body: formData,\n// // //       });\n// // //       const data = await response.json();\n// // //       setQuestions(data.questions);\n// // //       setResumeText(data.resumeText);\n// // //     } catch (error) {\n// // //       console.error('Error uploading files:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n\n// // //   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n// // //   const handleGenerateAnswer = async () => {\n// // //     if (!selectedQuestion || !resumeText) return;\n// // //     setIsLoading(true);\n\n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n// // //         method: 'POST',\n// // //         headers: { 'Content-Type': 'application/json' },\n// // //         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n// // //       });\n// // //       const data = await response.json();\n// // //       setAnswer(data.answer);\n// // //     } catch (error) {\n// // //       console.error('Error generating answer:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       <header>\n// // //         <h1>Fastest 100 Question Interview Prep in the World!</h1>\n// // //       </header>\n// // //       <main>\n// // //         <div className=\"content-container\">\n// // //           <div className=\"upload-section\">\n// // //             <h2>Get Started by Uploading:</h2>\n// // //             <form onSubmit={handleSubmit} className=\"upload-form\">\n// // //               <div className=\"file-input\">\n// // //                 <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   name=\"jobPostingUrl\"\n// // //                   id=\"jobPostingUrl\"\n// // //                   value={jobPostingUrl}\n// // //                   onChange={handleFileChange}\n// // //                   placeholder=\"Enter Google Jobs URL\"\n// // //                 />\n// // //               </div>\n// // //               <div className=\"file-input\">\n// // //                 <label htmlFor=\"jobPosting\" className=\"custom-file-upload\">\n// // //                   <i className=\"fas fa-file-pdf\"></i> Upload Job Posting PDF\n// // //                 </label>\n// // //                 <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n// // //                 {jobPosting && <p>Uploaded: {jobPosting.name}</p>}\n// // //               </div>\n// // //               <div className=\"file-input\">\n// // //                 <label htmlFor=\"resume\" className=\"custom-file-upload\">\n// // //                   <i className=\"fas fa-file-pdf\"></i> Upload Resume PDF\n// // //                 </label>\n// // //                 <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n// // //                 {resume && <p>Uploaded: {resume.name}</p>}\n// // //               </div>\n// // //               <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n// // //                 {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Questions'}\n// // //               </button>\n// // //             </form>\n// // //           </div>\n// // //           <div className=\"questions-answer-container\">\n// // //             {questions.length > 0 && (\n// // //               <div className=\"questions-section\">\n// // //                 <h2>Choose a Question to Practice</h2>\n// // //                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n// // //                   <option value=\"\">Select a Question</option>\n// // //                   {questions.map((question, index) => (\n// // //                     <option key={index} value={question}>\n// // //                       {question}\n// // //                     </option>\n// // //                   ))}\n// // //                 </select>\n// // //                 <button onClick={handleGenerateAnswer} className=\"generate-btn\" disabled={isLoading}>\n// // //                   {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Answer'}\n// // //                 </button>\n// // //               </div>\n// // //             )}\n// // //             {answer && (\n// // //               <div className=\"answer-section\">\n// // //                 <h2>Your Sample Answer</h2>\n// // //                 <p>{answer}</p>\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       </main>\n// // //       <footer>\n// // //         <p>\n// // //           Powered by Groq:{' '}\n// // //           <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1\" target=\"_blank\" rel=\"noopener noreferrer\">\n// // //             Mixtral-8x7b-Instruct-v0.1\n// // //           </a>\n// // //         </p>\n// // //       </footer>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default App;\n\n// // import React, { useState } from 'react';\n// // import './App.css';\n\n// // function App() {\n// //   const [jobPostingUrl, setJobPostingUrl] = useState('');\n// //   const [jobPosting, setJobPosting] = useState(null);\n// //   const [resume, setResume] = useState(null);\n// //   const [resumeText, setResumeText] = useState('');\n// //   const [selectedQuestion, setSelectedQuestion] = useState('');\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answer, setAnswer] = useState('');\n// //   const [isLoading, setIsLoading] = useState(false);\n\n// //   const handleFileChange = (e) => {\n// //     const { name, files, value } = e.target;\n// //     if (name === 'jobPosting') {\n// //       setJobPosting(files[0]);\n// //     } else if (name === 'jobPostingUrl') {\n// //       setJobPostingUrl(value);\n// //     } else {\n// //       setResume(files[0]);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setIsLoading(true);\n\n// //     const formData = new FormData();\n// //     if (jobPosting) {\n// //       formData.append('job_posting', jobPosting);\n// //     }\n// //     if (jobPostingUrl) {\n// //       formData.append('job_posting_url', jobPostingUrl);\n// //     }\n// //     formData.append('resume', resume);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// //         method: 'POST',\n// //         body: formData,\n// //       });\n// //       const data = await response.json();\n// //       setQuestions(data.questions);\n// //       setResumeText(data.resumeText);\n// //     } catch (error) {\n// //       console.error('Error uploading files:', error);\n// //     } finally {\n// //       setIsLoading(false);\n// //     }\n// //   };\n\n// //   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n// //   const handleGenerateAnswer = async () => {\n// //     if (!selectedQuestion || !resumeText) return;\n// //     setIsLoading(true);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n// //         method: 'POST',\n// //         headers: { 'Content-Type': 'application/json' },\n// //         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n// //       });\n// //       const data = await response.json();\n// //       setAnswer(data.answer);\n// //     } catch (error) {\n// //       console.error('Error generating answer:', error);\n// //     } finally {\n// //       setIsLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <header>\n// //         <h1>Fastest 100 Question Interview Prep in the World!</h1>\n// //       </header>\n// //       <main>\n// //         <div className=\"content-container\">\n// //           <div className=\"upload-section\">\n// //             <h2>Get Started by Uploading:</h2>\n// //             <form onSubmit={handleSubmit} className=\"upload-form\">\n// //               <div className=\"file-input\">\n// //                 <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n// //                 <input\n// //                   type=\"text\"\n// //                   name=\"jobPostingUrl\"\n// //                   id=\"jobPostingUrl\"\n// //                   value={jobPostingUrl}\n// //                   onChange={handleFileChange}\n// //                   placeholder=\"Enter Google Jobs URL\"\n// //                 />\n// //               </div>\n// //               <div className=\"file-input\">\n// //                 <label htmlFor=\"jobPosting\" className=\"custom-file-upload\">\n// //                   <i className=\"fas fa-file-pdf\"></i> Upload Job Posting PDF\n// //                 </label>\n// //                 <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n// //                 {jobPosting && <p>Uploaded: {jobPosting.name}</p>}\n// //               </div>\n// //               <div className=\"file-input\">\n// //                 <label htmlFor=\"resume\" className=\"custom-file-upload\">\n// //                   <i className=\"fas fa-file-pdf\"></i> Upload Resume PDF\n// //                 </label>\n// //                 <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n// //                 {resume && <p>Uploaded: {resume.name}</p>}\n// //               </div>\n// //               <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n// //                 {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Questions'}\n// //               </button>\n// //             </form>\n// //           </div>\n// //           <div className=\"questions-answer-container\">\n// //             {questions.length > 0 && (\n// //               <div className=\"questions-section\">\n// //                 <h2>Choose a Question to Practice</h2>\n// //                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n// //                   <option value=\"\">Select a Question</option>\n// //                   {questions.map((question, index) => (\n// //                     <option key={index} value={question}>\n// //                       {question}\n// //                     </option>\n// //                   ))}\n// //                 </select>\n// //                 <button onClick={handleGenerateAnswer} className=\"generate-btn\" disabled={isLoading}>\n// //                   {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Answer'}\n// //                 </button>\n// //               </div>\n// //             )}\n// //             {answer && (\n// //               <div className=\"answer-section\">\n// //                 <h2>Your Sample Answer</h2>\n// //                 <p>{answer}</p>\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       </main>\n// //       <footer>\n// //         <p>\n// //           Powered by Mistral:{' '}\n// //           <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1\" target=\"_blank\" rel=\"noopener noreferrer\">\n// //             Mixtral-8x7b-Instruct-v0.1\n// //           </a>\n// //         </p>\n// //       </footer>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [jobPostingUrl, setJobPostingUrl] = useState('');\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [resumeText, setResumeText] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleFileChange = (e) => {\n//     const { name, files, value } = e.target;\n//     if (name === 'jobPosting') {\n//       setJobPosting(files[0]);\n//     } else if (name === 'jobPostingUrl') {\n//       setJobPostingUrl(value);\n//     } else {\n//       setResume(files[0]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     const formData = new FormData();\n//     if (jobPosting) {\n//       formData.append('job_posting', jobPosting);\n//     }\n//     if (jobPostingUrl) {\n//       formData.append('job_posting_url', jobPostingUrl);\n//     }\n//     formData.append('resume', resume);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//       setResumeText(data.resumeText);\n//     } catch (error) {\n//       console.error('Error uploading files:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n//   const handleGenerateAnswer = async () => {\n//     if (!selectedQuestion || !resumeText) return;\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n//       });\n//       const data = await response.json();\n//       setAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header>\n//         <h1>InterviewPrep.AI</h1>\n//         <p>Ace your next interview with AI-powered preparation!</p>\n//       </header>\n//       <main>\n//         <section className=\"upload-section\">\n//           <h2>Upload Your Documents</h2>\n//           <form onSubmit={handleSubmit} className=\"upload-form\">\n//             <div className=\"form-group\">\n//               <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"jobPostingUrl\"\n//                 id=\"jobPostingUrl\"\n//                 value={jobPostingUrl}\n//                 onChange={handleFileChange}\n//                 placeholder=\"Enter Google Jobs URL\"\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"jobPosting\">Choose Job Posting</label>\n//               <div className=\"file-upload\">\n//                 <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n//                 <span className=\"file-upload-btn\"></span>\n//               </div>\n//               {jobPosting && <p className=\"file-name\">{jobPosting.name}</p>}\n//             </div>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"resume\">Choose Resume</label>\n//               <div className=\"file-upload\">\n//                 <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n//                 <span className=\"file-upload-btn\"></span>\n//               </div>\n//               {resume && <p className=\"file-name\">{resume.name}</p>}\n//             </div>\n//             <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n//               {isLoading ? 'Generating...' : 'Generate Questions'}\n//             </button>\n//           </form>\n//         </section>\n//         <section className=\"questions-section\">\n//           <h2>Practice Questions</h2>\n//           {questions.length > 0 ? (\n//             <>\n//               <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n//                 <option value=\"\">Select a question</option>\n//                 {questions.map((question, index) => (\n//                   <option key={index} value={question}>\n//                     {question}\n//                   </option>\n//                 ))}\n//               </select>\n//               <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n//                 {isLoading ? 'Generating...' : 'Generate Answer'}\n//               </button>\n//               {answer && (\n//                 <div className=\"answer-section\">\n//                   <h3>Sample Answer:</h3>\n//                   <p>{answer}</p>\n//                 </div>\n//               )}\n//             </>\n//           ) : (\n//             <p>No questions generated yet. Upload your documents to get started.</p>\n//           )}\n//         </section>\n//       </main>\n//       <footer>\n//         <p>&copy; 2023 InterviewPrep.AI. All rights reserved.</p>\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [jobPostingUrl, setJobPostingUrl] = useState('');\n  const [jobPosting, setJobPosting] = useState(null);\n  const [resume, setResume] = useState(null);\n  const [resumeText, setResumeText] = useState('');\n  const [selectedQuestion, setSelectedQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleFileChange = e => {\n    const {\n      name,\n      files,\n      value\n    } = e.target;\n    if (name === 'jobPosting') {\n      setJobPosting(files[0]);\n    } else if (name === 'jobPostingUrl') {\n      setJobPostingUrl(value);\n    } else {\n      setResume(files[0]);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    const formData = new FormData();\n    if (jobPosting) {\n      formData.append('job_posting', jobPosting);\n    }\n    if (jobPostingUrl) {\n      formData.append('job_posting_url', jobPostingUrl);\n    }\n    formData.append('resume', resume);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      setQuestions(data.questions);\n      setResumeText(data.resumeText);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleQuestionChange = e => setSelectedQuestion(e.target.value);\n  const handleGenerateAnswer = async () => {\n    if (!selectedQuestion || !resumeText) return;\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question: selectedQuestion,\n          resume: resumeText\n        })\n      });\n      const data = await response.json();\n      setAnswer(data.answer);\n    } catch (error) {\n      console.error('Error generating answer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"InterviewPrep.AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ace your next interview with AI-powered preparation!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload Your Documents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"upload-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"jobPostingUrl\",\n              children: \"Google Jobs Link:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"jobPostingUrl\",\n              id: \"jobPostingUrl\",\n              value: jobPostingUrl,\n              onChange: handleFileChange,\n              placeholder: \"Enter Google Jobs URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"jobPosting\",\n              children: \"Choose Job Posting\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-upload\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                name: \"jobPosting\",\n                id: \"jobPosting\",\n                onChange: handleFileChange,\n                accept: \".pdf\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 705,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-upload-btn\",\n                children: \"Upload Job Posting PDF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 15\n            }, this), jobPosting && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"file-name\",\n              children: jobPosting.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"resume\",\n              children: \"Choose Resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"file-upload\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                name: \"resume\",\n                id: \"resume\",\n                onChange: handleFileChange,\n                accept: \".pdf\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 713,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"file-upload-btn\",\n                children: \"Upload Resume PDF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 15\n            }, this), resume && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"file-name\",\n              children: resume.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 26\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn-primary\",\n            disabled: isLoading,\n            children: isLoading ? 'Generating...' : 'Generate Questions'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"questions-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Practice Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 11\n        }, this), questions.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedQuestion,\n            onChange: handleQuestionChange,\n            className: \"question-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 17\n            }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: question,\n              children: question\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleGenerateAnswer,\n            className: \"btn-secondary\",\n            disabled: isLoading,\n            children: isLoading ? 'Generating...' : 'Generate Answer'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 11\n          }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answer-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Sample Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: answer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No questions generated yet. Upload your documents to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 2023 InterviewPrep.AI. All rights reserved.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 682,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VAWIsKwlTIEzldurqAxWN1vk8/0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","jobPostingUrl","setJobPostingUrl","jobPosting","setJobPosting","resume","setResume","resumeText","setResumeText","selectedQuestion","setSelectedQuestion","questions","setQuestions","answer","setAnswer","isLoading","setIsLoading","handleFileChange","e","name","files","value","target","handleSubmit","preventDefault","formData","FormData","append","response","fetch","method","body","data","json","error","console","handleQuestionChange","handleGenerateAnswer","headers","JSON","stringify","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","placeholder","accept","disabled","length","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/kabeerthockchom/interview helper/job-interview-helper/src/App.js"],"sourcesContent":["// // // import React, { useState } from 'react';\n// // // import './App.css';\n\n// // // function App() {\n// // //   const [jobPostingUrl, setJobPostingUrl] = useState('');\n// // //   const [jobPosting, setJobPosting] = useState(null);\n// // //   const [resume, setResume] = useState(null);\n// // //   const [resumeText, setResumeText] = useState('');\n// // //   const [selectedQuestion, setSelectedQuestion] = useState('');\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [answer, setAnswer] = useState('');\n// // //   const [isLoading, setIsLoading] = useState(false);\n\n// // //   const handleFileChange = (e) => {\n// // //     const { name, files, value } = e.target;\n// // //     if (name === 'jobPosting') {\n// // //       setJobPosting(files[0]);\n// // //     } else if (name === 'jobPostingUrl') {\n// // //       setJobPostingUrl(value);\n// // //     } else {\n// // //       setResume(files[0]);\n// // //     }\n// // //   };\n\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setIsLoading(true);\n  \n// // //     const formData = new FormData();\n// // //     if (jobPosting) {\n// // //       formData.append('job_posting', jobPosting);\n// // //     } else if (jobPostingUrl) {\n// // //       formData.append('job_posting_url', jobPostingUrl);\n// // //     }\n// // //     formData.append('resume', resume);\n  \n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// // //         method: 'POST',\n// // //         body: formData,\n// // //       });\n// // //       const data = await response.json();\n// // //       setQuestions(data.questions);\n// // //       setResumeText(data.resumeText);\n// // //     } catch (error) {\n// // //       console.error('Error uploading files:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n// // //   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n// // //   const handleGenerateAnswer = async () => {\n// // //     if (!selectedQuestion || !resumeText) return;\n// // //     setIsLoading(true);\n\n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n// // //         method: 'POST',\n// // //         headers: { 'Content-Type': 'application/json' },\n// // //         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n// // //       });\n// // //       const data = await response.json();\n// // //       setAnswer(data.answer);\n// // //     } catch (error) {\n// // //       console.error('Error generating answer:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       <header>\n// // //         <h1>Fastest 100 Question Interview Prep in the World!</h1>\n// // //       </header>\n// // //       <main>\n// // //         <div className=\"content-container\">\n// // //         <div className=\"upload-section\">\n// // //   <h2>Get Started by Uploading:</h2>\n// // //   <form onSubmit={handleSubmit} className=\"upload-form\">\n// // //     <div className=\"file-input\">\n// // //       <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n// // //       <input\n// // //         type=\"text\"\n// // //         name=\"jobPostingUrl\"\n// // //         id=\"jobPostingUrl\"\n// // //         value={jobPostingUrl}\n// // //         onChange={handleFileChange}\n// // //         placeholder=\"Enter Google Jobs URL\"\n// // //       />\n// // //     </div>\n// // //     <div className=\"file-input\">\n// // //       <label htmlFor=\"jobPosting\" className=\"custom-file-upload\">\n// // //         <i className=\"fas fa-file-pdf\"></i> Upload Job Posting PDF\n// // //       </label>\n// // //       <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n// // //       {jobPosting && <p>Uploaded: {jobPosting.name}</p>}\n// // //     </div>\n// // //     <div className=\"file-input\">\n// // //       <label htmlFor=\"resume\" className=\"custom-file-upload\">\n// // //         <i className=\"fas fa-file-pdf\"></i> Upload Resume PDF\n// // //       </label>\n// // //       <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n// // //       {resume && <p>Uploaded: {resume.name}</p>}\n// // //     </div>\n// // //     <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n// // //       {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Questions'}\n// // //     </button>\n// // //   </form>\n// // // </div>\n// // //           <div className=\"questions-answer-container\">\n// // //             {questions.length > 0 && (\n// // //               <div className=\"questions-section\">\n// // //                 <h2>Choose a Question to Practice</h2>\n// // //                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n// // //                   <option value=\"\">Select a Question</option>\n// // //                   {questions.map((question, index) => (\n// // //                     <option key={index} value={question}>\n// // //                       {question}\n// // //                     </option>\n// // //                   ))}\n// // //                 </select>\n// // //                 <button onClick={handleGenerateAnswer} className=\"generate-btn\" disabled={isLoading}>\n// // //                   {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Answer'}\n// // //                 </button>\n// // //               </div>\n// // //             )}\n// // //             {answer && (\n// // //               <div className=\"answer-section\">\n// // //                 <h2>Your Sample Answer</h2>\n// // //                 <p>{answer}</p>\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       </main>\n// // //       <footer>\n// // //   <p>\n// // //     Powered by Groq:{' '}\n// // //     <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1\" target=\"_blank\" rel=\"noopener noreferrer\">\n// // //       Mixtral-8x7b-Instruct-v0.1\n// // //     </a>\n// // //   </p>\n// // // </footer>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default App;\n\n// // // import React, { useState } from 'react';\n// // // import './App.css';\n\n// // // function App() {\n// // //   const [jobPostingUrl, setJobPostingUrl] = useState('');\n// // //   const [jobPosting, setJobPosting] = useState(null);\n// // //   const [resume, setResume] = useState(null);\n// // //   const [resumeText, setResumeText] = useState('');\n// // //   const [selectedQuestion, setSelectedQuestion] = useState('');\n// // //   const [questions, setQuestions] = useState([]);\n// // //   const [answer, setAnswer] = useState('');\n// // //   const [isLoading, setIsLoading] = useState(false);\n\n// // //   const handleFileChange = (e) => {\n// // //     const { name, files, value } = e.target;\n// // //     if (name === 'jobPosting') {\n// // //       setJobPosting(files[0]);\n// // //     } else if (name === 'jobPostingUrl') {\n// // //       setJobPostingUrl(value);\n// // //     } else {\n// // //       setResume(files[0]);\n// // //     }\n// // //   };\n// // //   const handleSubmit = async (e) => {\n// // //     e.preventDefault();\n// // //     setIsLoading(true);\n  \n// // //     const formData = new FormData();\n// // //     if (jobPosting) {\n// // //       formData.append('job_posting', jobPosting);\n// // //     }\n// // //     if (jobPostingUrl) {\n// // //       formData.append('job_posting_url', jobPostingUrl);\n// // //     }\n// // //     formData.append('resume', resume);\n  \n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// // //         method: 'POST',\n// // //         body: formData,\n// // //       });\n// // //       const data = await response.json();\n// // //       setQuestions(data.questions);\n// // //       setResumeText(data.resumeText);\n// // //     } catch (error) {\n// // //       console.error('Error uploading files:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n\n// // //   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n// // //   const handleGenerateAnswer = async () => {\n// // //     if (!selectedQuestion || !resumeText) return;\n// // //     setIsLoading(true);\n\n// // //     try {\n// // //       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n// // //         method: 'POST',\n// // //         headers: { 'Content-Type': 'application/json' },\n// // //         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n// // //       });\n// // //       const data = await response.json();\n// // //       setAnswer(data.answer);\n// // //     } catch (error) {\n// // //       console.error('Error generating answer:', error);\n// // //     } finally {\n// // //       setIsLoading(false);\n// // //     }\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       <header>\n// // //         <h1>Fastest 100 Question Interview Prep in the World!</h1>\n// // //       </header>\n// // //       <main>\n// // //         <div className=\"content-container\">\n// // //           <div className=\"upload-section\">\n// // //             <h2>Get Started by Uploading:</h2>\n// // //             <form onSubmit={handleSubmit} className=\"upload-form\">\n// // //               <div className=\"file-input\">\n// // //                 <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n// // //                 <input\n// // //                   type=\"text\"\n// // //                   name=\"jobPostingUrl\"\n// // //                   id=\"jobPostingUrl\"\n// // //                   value={jobPostingUrl}\n// // //                   onChange={handleFileChange}\n// // //                   placeholder=\"Enter Google Jobs URL\"\n// // //                 />\n// // //               </div>\n// // //               <div className=\"file-input\">\n// // //                 <label htmlFor=\"jobPosting\" className=\"custom-file-upload\">\n// // //                   <i className=\"fas fa-file-pdf\"></i> Upload Job Posting PDF\n// // //                 </label>\n// // //                 <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n// // //                 {jobPosting && <p>Uploaded: {jobPosting.name}</p>}\n// // //               </div>\n// // //               <div className=\"file-input\">\n// // //                 <label htmlFor=\"resume\" className=\"custom-file-upload\">\n// // //                   <i className=\"fas fa-file-pdf\"></i> Upload Resume PDF\n// // //                 </label>\n// // //                 <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n// // //                 {resume && <p>Uploaded: {resume.name}</p>}\n// // //               </div>\n// // //               <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n// // //                 {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Questions'}\n// // //               </button>\n// // //             </form>\n// // //           </div>\n// // //           <div className=\"questions-answer-container\">\n// // //             {questions.length > 0 && (\n// // //               <div className=\"questions-section\">\n// // //                 <h2>Choose a Question to Practice</h2>\n// // //                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n// // //                   <option value=\"\">Select a Question</option>\n// // //                   {questions.map((question, index) => (\n// // //                     <option key={index} value={question}>\n// // //                       {question}\n// // //                     </option>\n// // //                   ))}\n// // //                 </select>\n// // //                 <button onClick={handleGenerateAnswer} className=\"generate-btn\" disabled={isLoading}>\n// // //                   {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Answer'}\n// // //                 </button>\n// // //               </div>\n// // //             )}\n// // //             {answer && (\n// // //               <div className=\"answer-section\">\n// // //                 <h2>Your Sample Answer</h2>\n// // //                 <p>{answer}</p>\n// // //               </div>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       </main>\n// // //       <footer>\n// // //         <p>\n// // //           Powered by Groq:{' '}\n// // //           <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1\" target=\"_blank\" rel=\"noopener noreferrer\">\n// // //             Mixtral-8x7b-Instruct-v0.1\n// // //           </a>\n// // //         </p>\n// // //       </footer>\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default App;\n\n// // import React, { useState } from 'react';\n// // import './App.css';\n\n// // function App() {\n// //   const [jobPostingUrl, setJobPostingUrl] = useState('');\n// //   const [jobPosting, setJobPosting] = useState(null);\n// //   const [resume, setResume] = useState(null);\n// //   const [resumeText, setResumeText] = useState('');\n// //   const [selectedQuestion, setSelectedQuestion] = useState('');\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answer, setAnswer] = useState('');\n// //   const [isLoading, setIsLoading] = useState(false);\n\n// //   const handleFileChange = (e) => {\n// //     const { name, files, value } = e.target;\n// //     if (name === 'jobPosting') {\n// //       setJobPosting(files[0]);\n// //     } else if (name === 'jobPostingUrl') {\n// //       setJobPostingUrl(value);\n// //     } else {\n// //       setResume(files[0]);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     setIsLoading(true);\n\n// //     const formData = new FormData();\n// //     if (jobPosting) {\n// //       formData.append('job_posting', jobPosting);\n// //     }\n// //     if (jobPostingUrl) {\n// //       formData.append('job_posting_url', jobPostingUrl);\n// //     }\n// //     formData.append('resume', resume);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// //         method: 'POST',\n// //         body: formData,\n// //       });\n// //       const data = await response.json();\n// //       setQuestions(data.questions);\n// //       setResumeText(data.resumeText);\n// //     } catch (error) {\n// //       console.error('Error uploading files:', error);\n// //     } finally {\n// //       setIsLoading(false);\n// //     }\n// //   };\n\n// //   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n// //   const handleGenerateAnswer = async () => {\n// //     if (!selectedQuestion || !resumeText) return;\n// //     setIsLoading(true);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n// //         method: 'POST',\n// //         headers: { 'Content-Type': 'application/json' },\n// //         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n// //       });\n// //       const data = await response.json();\n// //       setAnswer(data.answer);\n// //     } catch (error) {\n// //       console.error('Error generating answer:', error);\n// //     } finally {\n// //       setIsLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <header>\n// //         <h1>Fastest 100 Question Interview Prep in the World!</h1>\n// //       </header>\n// //       <main>\n// //         <div className=\"content-container\">\n// //           <div className=\"upload-section\">\n// //             <h2>Get Started by Uploading:</h2>\n// //             <form onSubmit={handleSubmit} className=\"upload-form\">\n// //               <div className=\"file-input\">\n// //                 <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n// //                 <input\n// //                   type=\"text\"\n// //                   name=\"jobPostingUrl\"\n// //                   id=\"jobPostingUrl\"\n// //                   value={jobPostingUrl}\n// //                   onChange={handleFileChange}\n// //                   placeholder=\"Enter Google Jobs URL\"\n// //                 />\n// //               </div>\n// //               <div className=\"file-input\">\n// //                 <label htmlFor=\"jobPosting\" className=\"custom-file-upload\">\n// //                   <i className=\"fas fa-file-pdf\"></i> Upload Job Posting PDF\n// //                 </label>\n// //                 <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n// //                 {jobPosting && <p>Uploaded: {jobPosting.name}</p>}\n// //               </div>\n// //               <div className=\"file-input\">\n// //                 <label htmlFor=\"resume\" className=\"custom-file-upload\">\n// //                   <i className=\"fas fa-file-pdf\"></i> Upload Resume PDF\n// //                 </label>\n// //                 <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n// //                 {resume && <p>Uploaded: {resume.name}</p>}\n// //               </div>\n// //               <button type=\"submit\" className=\"submit-btn\" disabled={isLoading}>\n// //                 {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Questions'}\n// //               </button>\n// //             </form>\n// //           </div>\n// //           <div className=\"questions-answer-container\">\n// //             {questions.length > 0 && (\n// //               <div className=\"questions-section\">\n// //                 <h2>Choose a Question to Practice</h2>\n// //                 <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n// //                   <option value=\"\">Select a Question</option>\n// //                   {questions.map((question, index) => (\n// //                     <option key={index} value={question}>\n// //                       {question}\n// //                     </option>\n// //                   ))}\n// //                 </select>\n// //                 <button onClick={handleGenerateAnswer} className=\"generate-btn\" disabled={isLoading}>\n// //                   {isLoading ? <div className=\"loading-icon\"></div> : 'Generate Answer'}\n// //                 </button>\n// //               </div>\n// //             )}\n// //             {answer && (\n// //               <div className=\"answer-section\">\n// //                 <h2>Your Sample Answer</h2>\n// //                 <p>{answer}</p>\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       </main>\n// //       <footer>\n// //         <p>\n// //           Powered by Mistral:{' '}\n// //           <a href=\"https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1\" target=\"_blank\" rel=\"noopener noreferrer\">\n// //             Mixtral-8x7b-Instruct-v0.1\n// //           </a>\n// //         </p>\n// //       </footer>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [jobPostingUrl, setJobPostingUrl] = useState('');\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [resumeText, setResumeText] = useState('');\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [questions, setQuestions] = useState([]);\n//   const [answer, setAnswer] = useState('');\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const handleFileChange = (e) => {\n//     const { name, files, value } = e.target;\n//     if (name === 'jobPosting') {\n//       setJobPosting(files[0]);\n//     } else if (name === 'jobPostingUrl') {\n//       setJobPostingUrl(value);\n//     } else {\n//       setResume(files[0]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     setIsLoading(true);\n\n//     const formData = new FormData();\n//     if (jobPosting) {\n//       formData.append('job_posting', jobPosting);\n//     }\n//     if (jobPostingUrl) {\n//       formData.append('job_posting_url', jobPostingUrl);\n//     }\n//     formData.append('resume', resume);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//       setResumeText(data.resumeText);\n//     } catch (error) {\n//       console.error('Error uploading files:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n//   const handleGenerateAnswer = async () => {\n//     if (!selectedQuestion || !resumeText) return;\n//     setIsLoading(true);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n//       });\n//       const data = await response.json();\n//       setAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header>\n//         <h1>InterviewPrep.AI</h1>\n//         <p>Ace your next interview with AI-powered preparation!</p>\n//       </header>\n//       <main>\n//         <section className=\"upload-section\">\n//           <h2>Upload Your Documents</h2>\n//           <form onSubmit={handleSubmit} className=\"upload-form\">\n//             <div className=\"form-group\">\n//               <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n//               <input\n//                 type=\"text\"\n//                 name=\"jobPostingUrl\"\n//                 id=\"jobPostingUrl\"\n//                 value={jobPostingUrl}\n//                 onChange={handleFileChange}\n//                 placeholder=\"Enter Google Jobs URL\"\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"jobPosting\">Choose Job Posting</label>\n//               <div className=\"file-upload\">\n//                 <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n//                 <span className=\"file-upload-btn\"></span>\n//               </div>\n//               {jobPosting && <p className=\"file-name\">{jobPosting.name}</p>}\n//             </div>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"resume\">Choose Resume</label>\n//               <div className=\"file-upload\">\n//                 <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n//                 <span className=\"file-upload-btn\"></span>\n//               </div>\n//               {resume && <p className=\"file-name\">{resume.name}</p>}\n//             </div>\n//             <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n//               {isLoading ? 'Generating...' : 'Generate Questions'}\n//             </button>\n//           </form>\n//         </section>\n//         <section className=\"questions-section\">\n//           <h2>Practice Questions</h2>\n//           {questions.length > 0 ? (\n//             <>\n//               <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n//                 <option value=\"\">Select a question</option>\n//                 {questions.map((question, index) => (\n//                   <option key={index} value={question}>\n//                     {question}\n//                   </option>\n//                 ))}\n//               </select>\n//               <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n//                 {isLoading ? 'Generating...' : 'Generate Answer'}\n//               </button>\n//               {answer && (\n//                 <div className=\"answer-section\">\n//                   <h3>Sample Answer:</h3>\n//                   <p>{answer}</p>\n//                 </div>\n//               )}\n//             </>\n//           ) : (\n//             <p>No questions generated yet. Upload your documents to get started.</p>\n//           )}\n//         </section>\n//       </main>\n//       <footer>\n//         <p>&copy; 2023 InterviewPrep.AI. All rights reserved.</p>\n//       </footer>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [jobPostingUrl, setJobPostingUrl] = useState('');\n  const [jobPosting, setJobPosting] = useState(null);\n  const [resume, setResume] = useState(null);\n  const [resumeText, setResumeText] = useState('');\n  const [selectedQuestion, setSelectedQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFileChange = (e) => {\n    const { name, files, value } = e.target;\n    if (name === 'jobPosting') {\n      setJobPosting(files[0]);\n    } else if (name === 'jobPostingUrl') {\n      setJobPostingUrl(value);\n    } else {\n      setResume(files[0]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const formData = new FormData();\n    if (jobPosting) {\n      formData.append('job_posting', jobPosting);\n    }\n    if (jobPostingUrl) {\n      formData.append('job_posting_url', jobPostingUrl);\n    }\n    formData.append('resume', resume);\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      setQuestions(data.questions);\n      setResumeText(data.resumeText);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleQuestionChange = (e) => setSelectedQuestion(e.target.value);\n\n  const handleGenerateAnswer = async () => {\n    if (!selectedQuestion || !resumeText) return;\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ question: selectedQuestion, resume: resumeText }),\n      });\n      const data = await response.json();\n      setAnswer(data.answer);\n    } catch (error) {\n      console.error('Error generating answer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>InterviewPrep.AI</h1>\n        <p>Ace your next interview with AI-powered preparation!</p>\n      </header>\n      <main>\n        <section className=\"upload-section\">\n          <h2>Upload Your Documents</h2>\n          <form onSubmit={handleSubmit} className=\"upload-form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"jobPostingUrl\">Google Jobs Link:</label>\n              <input\n                type=\"text\"\n                name=\"jobPostingUrl\"\n                id=\"jobPostingUrl\"\n                value={jobPostingUrl}\n                onChange={handleFileChange}\n                placeholder=\"Enter Google Jobs URL\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"jobPosting\">Choose Job Posting</label>\n              <div className=\"file-upload\">\n                <input type=\"file\" name=\"jobPosting\" id=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\" />\n                <span className=\"file-upload-btn\">Upload Job Posting PDF</span>\n              </div>\n              {jobPosting && <p className=\"file-name\">{jobPosting.name}</p>}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"resume\">Choose Resume</label>\n              <div className=\"file-upload\">\n                <input type=\"file\" name=\"resume\" id=\"resume\" onChange={handleFileChange} accept=\".pdf\" />\n                <span className=\"file-upload-btn\">Upload Resume PDF</span>\n              </div>\n              {resume && <p className=\"file-name\">{resume.name}</p>}\n            </div>\n            <button type=\"submit\" className=\"btn-primary\" disabled={isLoading}>\n              {isLoading ? 'Generating...' : 'Generate Questions'}\n            </button>\n          </form>\n        </section>\n        <section className=\"questions-section\">\n          <h2>Practice Questions</h2>\n          {questions.length > 0 ? (\n            <>\n              <select value={selectedQuestion} onChange={handleQuestionChange} className=\"question-select\">\n                <option value=\"\">Select a question</option>\n                {questions.map((question, index) => (\n              <option key={index} value={question}>\n                {question}\n              </option>\n            ))}\n          </select>\n          <button onClick={handleGenerateAnswer} className=\"btn-secondary\" disabled={isLoading}>\n            {isLoading ? 'Generating...' : 'Generate Answer'}\n          </button>\n          {answer && (\n            <div className=\"answer-section\">\n              <h3>Sample Answer:</h3>\n              <p>{answer}</p>\n            </div>\n          )}\n        </>\n      ) : (\n        <p>No questions generated yet. Upload your documents to get started.</p>\n      )}\n    </section>\n  </main>\n  <footer>\n    <p>&copy; 2023 InterviewPrep.AI. All rights reserved.</p>\n  </footer>\n</div>\n);\n}\n\nexport default App;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}