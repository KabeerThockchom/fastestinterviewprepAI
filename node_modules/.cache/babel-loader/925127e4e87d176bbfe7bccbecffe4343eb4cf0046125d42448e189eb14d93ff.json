{"ast":null,"code":"var _jsxFileName = \"/Users/kabeerthockchom/interview helper/job-interview-helper/src/App.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import './App.css';\n\n// // function App() {\n// //   const [jobPosting, setJobPosting] = useState(null);\n// //   const [resume, setResume] = useState(null);\n// //   const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n\n// //   const handleFileChange = (e) => {\n// //     const { name, files } = e.target;\n// //     if (name === 'jobPosting') {\n// //       setJobPosting(files[0]);\n// //     } else if (name === 'resume') {\n// //       setResume(files[0]);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     const formData = new FormData();\n// //     formData.append('job_posting', jobPosting);\n// //     formData.append('resume', resume);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// //         method: 'POST',\n// //         body: formData,\n// //       });\n// //       const data = await response.json();\n// //       setQuestionsAndAnswers(data.questionsAndAnswers);\n// //     } catch (error) {\n// //       console.error('Error uploading files:', error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <h1>Interview Preparation Helper</h1>\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label htmlFor=\"jobPosting\">Upload Job Posting PDF:</label>\n// //           <input type=\"file\" name=\"jobPosting\" onChange={handleFileChange} />\n// //         </div>\n// //         <div>\n// //           <label htmlFor=\"resume\">Upload Resume PDF:</label>\n// //           <input type=\"file\" name=\"resume\" onChange={handleFileChange} />\n// //         </div>\n// //         <button type=\"submit\">Generate Questions and Answers</button>\n// //       </form>\n// //       <div className=\"questions-and-answers\">\n// //         {questionsAndAnswers.map((qa, index) => (\n// //           <div key={index} className=\"qa-item\">\n// //             <div className=\"question\">{qa.question}</div>\n// //             <div className=\"answer\">{qa.answer}</div>\n// //           </div>\n// //         ))}\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// // import React, { useState } from 'react';\n// // import './App.css';\n\n// // function App() {\n// //   const [jobPosting, setJobPosting] = useState(null);\n// //   const [resume, setResume] = useState(null);\n// //   const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n\n// //   const handleFileChange = (e) => {\n// //     const file = e.target.files[0];\n// //     e.target.name === 'jobPosting' ? setJobPosting(file) : setResume(file);\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     const formData = new FormData();\n// //     formData.append('job_posting', jobPosting);\n// //     formData.append('resume', resume);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// //         method: 'POST',\n// //         body: formData,\n// //       });\n// //       const data = await response.json();\n// //       setQuestionsAndAnswers(data.questionsAndAnswers);\n// //     } catch (error) {\n// //       console.error('Error uploading files:', error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <header>\n// //         <h1>Interview Preparation Helper</h1>\n// //       </header>\n// //       <main>\n// //         <form onSubmit={handleSubmit} className=\"upload-form\">\n// //           <div className=\"file-input\">\n// //             <label htmlFor=\"jobPosting\">Job Posting PDF:</label>\n// //             <input type=\"file\" name=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\"/>\n// //           </div>\n// //           <div className=\"file-input\">\n// //             <label htmlFor=\"resume\">Resume PDF:</label>\n// //             <input type=\"file\" name=\"resume\" onChange={handleFileChange} accept=\".pdf\"/>\n// //           </div>\n// //           <button type=\"submit\" className=\"submit-btn\">Generate</button>\n// //         </form>\n// //         <section className=\"questions-and-answers\">\n// //           {questionsAndAnswers.map((qa, index) => (\n// //             <article key={index} className=\"qa-item\">\n// //               <h3 className=\"question\">Q: {qa.question}</h3>\n// //               <p className=\"answer\">A: {qa.answer}</p>\n// //             </article>\n// //           ))}\n// //         </section>\n// //       </main>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [questions, setQuestions] = useState([]);\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [generatedAnswer, setGeneratedAnswer] = useState('');\n\n//   const handleJobPostingChange = (e) => {\n//     setJobPosting(e.target.files[0]);\n//   };\n\n//   const handleResumeChange = (e) => {\n//     const reader = new FileReader();\n//     reader.onload = (e) => {\n//       setResume(e.target.result);\n//     };\n//     reader.readAsText(e.target.files[0]);\n//   };\n\n//   const handleQuestionSelect = (e) => {\n//     setSelectedQuestion(e.target.value);\n//   };\n\n//   const handleSubmitQuestions = async (e) => {\n//     e.preventDefault();\n//     const formData = new FormData();\n//     formData.append('job_posting', jobPosting);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//     } catch (error) {\n//       console.error('Error uploading job posting:', error);\n//     }\n//   };\n\n//   const handleGenerateAnswer = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/generate_answer', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           question: selectedQuestion,\n//           resume_text: resume,\n//         }),\n//       });\n//       const data = await response.json();\n//       setGeneratedAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header>\n//         <h1>Interview Preparation Helper</h1>\n//       </header>\n//       <main>\n//         <section className=\"file-upload-section\">\n//           <form className=\"upload-form\">\n//             <div className=\"file-input\">\n//               <label htmlFor=\"jobPosting\">Job Posting PDF:</label>\n//               <input type=\"file\" name=\"jobPosting\" onChange={handleJobPostingChange} accept=\".pdf\" />\n//             </div>\n//             <div className=\"file-input\">\n//               <label htmlFor=\"resume\">Resume PDF:</label>\n//               <input type=\"file\" name=\"resume\" onChange={handleResumeChange} accept=\".pdf\" />\n//             </div>\n//             <button type=\"button\" onClick={handleSubmitQuestions} className=\"submit-btn\">Upload Job Posting and Generate Questions</button>\n//           </form>\n//         </section>\n//         <section className=\"questions-section\">\n//           <h2>Select a Question</h2>\n//           <select value={selectedQuestion} onChange={handleQuestionSelect}>\n//             <option value=\"\">Select a question...</option>\n//             {questions.map((question, index) => (\n//               <option key={index} value={question}>\n//                 {question}\n//               </option>\n//             ))}\n//           </select>\n//           <button onClick={handleGenerateAnswer} className=\"generate-answer-btn\">Generate Answer</button>\n//         </section>\n//         {generatedAnswer && (\n//           <section className=\"answer-section\">\n//             <h3>Generated Answer</h3>\n//             <p>{generatedAnswer}</p>\n//           </section>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [jobPosting, setJobPosting] = useState(null);\n  const [resume, setResume] = useState(null);\n  const [resumeText, setResumeText] = useState('');\n  const [selectedQuestion, setSelectedQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState('');\n  const handleFileChange = e => {\n    const {\n      name,\n      files\n    } = e.target;\n    if (name === 'jobPosting') {\n      setJobPosting(files[0]);\n    } else if (name === 'resume') {\n      setResume(files[0]);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('job_posting', jobPosting);\n    formData.append('resume', resume);\n    setQuestions(data.questions);\n    setResumeText(data.resumeText); // Assuming the backend sends this\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      setQuestions(data.questions);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    }\n  };\n  const handleQuestionChange = e => {\n    setSelectedQuestion(e.target.value);\n  };\n  const handleGenerateAnswer = async () => {\n    if (!selectedQuestion || !resume) return;\n    try {\n      const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question: selectedQuestion,\n          resume: resume\n        })\n      });\n      const data = await response.json();\n      setAnswer(data.answer);\n    } catch (error) {\n      console.error('Error generating answer:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Preparation Helper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"jobPosting\",\n          children: \"Upload Job Posting PDF:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"jobPosting\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"resume\",\n          children: \"Upload Resume PDF:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"resume\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"questionSelect\",\n        children: \"Select a Question:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"questionSelect\",\n        value: selectedQuestion,\n        onChange: handleQuestionChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Please choose a question--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: question,\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateAnswer,\n        children: \"Generate Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7XXtO+CTX0pPS7EDIt94h1IDwik=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","jobPosting","setJobPosting","resume","setResume","resumeText","setResumeText","selectedQuestion","setSelectedQuestion","questions","setQuestions","answer","setAnswer","handleFileChange","e","name","files","target","handleSubmit","preventDefault","formData","FormData","append","data","response","fetch","method","body","json","error","console","handleQuestionChange","value","handleGenerateAnswer","headers","JSON","stringify","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","onChange","length","id","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/kabeerthockchom/interview helper/job-interview-helper/src/App.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import './App.css';\n\n// // function App() {\n// //   const [jobPosting, setJobPosting] = useState(null);\n// //   const [resume, setResume] = useState(null);\n// //   const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n\n// //   const handleFileChange = (e) => {\n// //     const { name, files } = e.target;\n// //     if (name === 'jobPosting') {\n// //       setJobPosting(files[0]);\n// //     } else if (name === 'resume') {\n// //       setResume(files[0]);\n// //     }\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     const formData = new FormData();\n// //     formData.append('job_posting', jobPosting);\n// //     formData.append('resume', resume);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// //         method: 'POST',\n// //         body: formData,\n// //       });\n// //       const data = await response.json();\n// //       setQuestionsAndAnswers(data.questionsAndAnswers);\n// //     } catch (error) {\n// //       console.error('Error uploading files:', error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <h1>Interview Preparation Helper</h1>\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label htmlFor=\"jobPosting\">Upload Job Posting PDF:</label>\n// //           <input type=\"file\" name=\"jobPosting\" onChange={handleFileChange} />\n// //         </div>\n// //         <div>\n// //           <label htmlFor=\"resume\">Upload Resume PDF:</label>\n// //           <input type=\"file\" name=\"resume\" onChange={handleFileChange} />\n// //         </div>\n// //         <button type=\"submit\">Generate Questions and Answers</button>\n// //       </form>\n// //       <div className=\"questions-and-answers\">\n// //         {questionsAndAnswers.map((qa, index) => (\n// //           <div key={index} className=\"qa-item\">\n// //             <div className=\"question\">{qa.question}</div>\n// //             <div className=\"answer\">{qa.answer}</div>\n// //           </div>\n// //         ))}\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// // import React, { useState } from 'react';\n// // import './App.css';\n\n// // function App() {\n// //   const [jobPosting, setJobPosting] = useState(null);\n// //   const [resume, setResume] = useState(null);\n// //   const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n\n// //   const handleFileChange = (e) => {\n// //     const file = e.target.files[0];\n// //     e.target.name === 'jobPosting' ? setJobPosting(file) : setResume(file);\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n// //     const formData = new FormData();\n// //     formData.append('job_posting', jobPosting);\n// //     formData.append('resume', resume);\n\n// //     try {\n// //       const response = await fetch('http://127.0.0.1:5000/upload', {\n// //         method: 'POST',\n// //         body: formData,\n// //       });\n// //       const data = await response.json();\n// //       setQuestionsAndAnswers(data.questionsAndAnswers);\n// //     } catch (error) {\n// //       console.error('Error uploading files:', error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <header>\n// //         <h1>Interview Preparation Helper</h1>\n// //       </header>\n// //       <main>\n// //         <form onSubmit={handleSubmit} className=\"upload-form\">\n// //           <div className=\"file-input\">\n// //             <label htmlFor=\"jobPosting\">Job Posting PDF:</label>\n// //             <input type=\"file\" name=\"jobPosting\" onChange={handleFileChange} accept=\".pdf\"/>\n// //           </div>\n// //           <div className=\"file-input\">\n// //             <label htmlFor=\"resume\">Resume PDF:</label>\n// //             <input type=\"file\" name=\"resume\" onChange={handleFileChange} accept=\".pdf\"/>\n// //           </div>\n// //           <button type=\"submit\" className=\"submit-btn\">Generate</button>\n// //         </form>\n// //         <section className=\"questions-and-answers\">\n// //           {questionsAndAnswers.map((qa, index) => (\n// //             <article key={index} className=\"qa-item\">\n// //               <h3 className=\"question\">Q: {qa.question}</h3>\n// //               <p className=\"answer\">A: {qa.answer}</p>\n// //             </article>\n// //           ))}\n// //         </section>\n// //       </main>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [jobPosting, setJobPosting] = useState(null);\n//   const [resume, setResume] = useState(null);\n//   const [questions, setQuestions] = useState([]);\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [generatedAnswer, setGeneratedAnswer] = useState('');\n\n//   const handleJobPostingChange = (e) => {\n//     setJobPosting(e.target.files[0]);\n//   };\n\n//   const handleResumeChange = (e) => {\n//     const reader = new FileReader();\n//     reader.onload = (e) => {\n//       setResume(e.target.result);\n//     };\n//     reader.readAsText(e.target.files[0]);\n//   };\n\n//   const handleQuestionSelect = (e) => {\n//     setSelectedQuestion(e.target.value);\n//   };\n\n//   const handleSubmitQuestions = async (e) => {\n//     e.preventDefault();\n//     const formData = new FormData();\n//     formData.append('job_posting', jobPosting);\n\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n//       const data = await response.json();\n//       setQuestions(data.questions);\n//     } catch (error) {\n//       console.error('Error uploading job posting:', error);\n//     }\n//   };\n\n//   const handleGenerateAnswer = async () => {\n//     try {\n//       const response = await fetch('http://127.0.0.1:5000/generate_answer', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           question: selectedQuestion,\n//           resume_text: resume,\n//         }),\n//       });\n//       const data = await response.json();\n//       setGeneratedAnswer(data.answer);\n//     } catch (error) {\n//       console.error('Error generating answer:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <header>\n//         <h1>Interview Preparation Helper</h1>\n//       </header>\n//       <main>\n//         <section className=\"file-upload-section\">\n//           <form className=\"upload-form\">\n//             <div className=\"file-input\">\n//               <label htmlFor=\"jobPosting\">Job Posting PDF:</label>\n//               <input type=\"file\" name=\"jobPosting\" onChange={handleJobPostingChange} accept=\".pdf\" />\n//             </div>\n//             <div className=\"file-input\">\n//               <label htmlFor=\"resume\">Resume PDF:</label>\n//               <input type=\"file\" name=\"resume\" onChange={handleResumeChange} accept=\".pdf\" />\n//             </div>\n//             <button type=\"button\" onClick={handleSubmitQuestions} className=\"submit-btn\">Upload Job Posting and Generate Questions</button>\n//           </form>\n//         </section>\n//         <section className=\"questions-section\">\n//           <h2>Select a Question</h2>\n//           <select value={selectedQuestion} onChange={handleQuestionSelect}>\n//             <option value=\"\">Select a question...</option>\n//             {questions.map((question, index) => (\n//               <option key={index} value={question}>\n//                 {question}\n//               </option>\n//             ))}\n//           </select>\n//           <button onClick={handleGenerateAnswer} className=\"generate-answer-btn\">Generate Answer</button>\n//         </section>\n//         {generatedAnswer && (\n//           <section className=\"answer-section\">\n//             <h3>Generated Answer</h3>\n//             <p>{generatedAnswer}</p>\n//           </section>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [jobPosting, setJobPosting] = useState(null);\n  const [resume, setResume] = useState(null);\n  const [resumeText, setResumeText] = useState('');\n  const [selectedQuestion, setSelectedQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState('');\n\n  const handleFileChange = (e) => {\n    const { name, files } = e.target;\n    if (name === 'jobPosting') {\n      setJobPosting(files[0]);\n    } else if (name === 'resume') {\n      setResume(files[0]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('job_posting', jobPosting);\n    formData.append('resume', resume);\n    setQuestions(data.questions);\n    setResumeText(data.resumeText);  // Assuming the backend sends this\n\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      setQuestions(data.questions);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    }\n  };\n\n  const handleQuestionChange = (e) => {\n    setSelectedQuestion\n    (e.target.value);\n  };\n\n  const handleGenerateAnswer = async () => {\n    if (!selectedQuestion || !resume) return;\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/generate-answer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          question: selectedQuestion,\n          resume: resume\n        }),\n      });\n      const data = await response.json();\n      setAnswer(data.answer);\n    } catch (error) {\n      console.error('Error generating answer:', error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Interview Preparation Helper</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"jobPosting\">Upload Job Posting PDF:</label>\n          <input type=\"file\" name=\"jobPosting\" onChange={handleFileChange} />\n        </div>\n        <div>\n          <label htmlFor=\"resume\">Upload Resume PDF:</label>\n          <input type=\"file\" name=\"resume\" onChange={handleFileChange} />\n        </div>\n        <button type=\"submit\">Generate Questions</button>\n      </form>\n      {questions.length > 0 && (\n        <div>\n          <label htmlFor=\"questionSelect\">Select a Question:</label>\n          <select id=\"questionSelect\" value={selectedQuestion} onChange={handleQuestionChange}>\n            <option value=\"\">--Please choose a question--</option>\n            {questions.map((question, index) => (\n              <option key={index} value={question}>\n                {question}\n              </option>\n            ))}\n          </select>\n          <button onClick={handleGenerateAnswer}>Generate Answer</button>\n        </div>\n      )}\n      {answer && (\n        <div className=\"answer-section\">\n          <h3>Answer</h3>\n          <p>{answer}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}